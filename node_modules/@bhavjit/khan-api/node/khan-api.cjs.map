{
  "version": 3,
  "sources": ["../src/index.ts", "../src/queries/index.ts", "../src/lib/constants.ts", "../src/utils/fetch.ts", "../src/queries/avatarDataForProfile.ts", "../src/queries/feedbackQuery.ts", "../src/queries/getFeedbackReplies.ts", "../src/utils/format.ts", "../src/utils/regexes.ts", "../src/queries/getFullUserProfile.ts", "../src/queries/getProfileWidgets.ts", "../src/queries/getUserByUsernameOrEmail.ts", "../src/queries/getUserHoverCardProfile.ts", "../src/queries/programQuery.ts", "../src/queries/projectsAuthoredByUser.ts", "../src/queries/QAExpandKeyInfo.ts", "../src/mutations/index.ts", "../src/mutations/loginWithPasswordMutation.ts", "../src/lib/Wrapper.ts", "../src/types/enums.ts", "../src/User.ts", "../src/types/responses.ts", "../src/utils/programs.ts", "../src/utils/resolvers.ts", "../src/Program.ts", "../src/utils/avatars.ts", "../src/utils/cookies.ts", "../src/lib/messages/BaseMessage.ts", "../src/lib/messages/Message.ts", "../src/lib/messages/Answer.ts", "../src/lib/messages/Question.ts", "../src/lib/messages/Reply.ts", "../src/lib/messages/TipsAndThanks.ts", "../src/utils/messages.ts", "../src/Client.ts"],
  "sourcesContent": ["/** Queries */\nexport * as queries from './queries'\n\n/** Mutations */\nexport * as mutations from './mutations'\n\n/** Classes */\nexport { default as Client } from './Client'\nexport * from './Client'\nexport { default as User } from './User'\nexport * from './User'\nexport { default as Program } from './Program'\nexport * from './Program'\nexport { default as BaseMessage } from './lib/messages/BaseMessage'\nexport * from './lib/messages/BaseMessage'\nexport { default as Message } from './lib/messages/Message'\nexport * from './lib/messages/Message'\nexport { default as TipsAndThanks } from './lib/messages/TipsAndThanks'\nexport * from './lib/messages/TipsAndThanks'\nexport { default as Question } from './lib/messages/Question'\nexport * from './lib/messages/Question'\nexport { default as Answer } from './lib/messages/Answer'\nexport * from './lib/messages/Answer'\nexport { default as Reply } from './lib/messages/Reply'\nexport * from './lib/messages/Reply'\n\n/** Utilities */\nexport * from './utils/avatars'\nexport * from './utils/programs'\nexport * from './utils/messages'\nexport * from './utils/regexes'\nexport * from './utils/resolvers'\n\n/** Types */\nexport * from './types/enums'\nexport * from './types/responses'\nexport * from './types/schema'\nexport * from './types/strings'\n", "export { default as avatarDataForProfile } from './avatarDataForProfile'\nexport * from './avatarDataForProfile'\nexport { default as feedbackQuery } from './feedbackQuery'\nexport * from './feedbackQuery'\nexport { default as getFeedbackReplies } from './getFeedbackReplies'\nexport * from './getFeedbackReplies'\nexport { default as getFullUserProfile } from './getFullUserProfile'\nexport * from './getFullUserProfile'\nexport { default as getProfileWidgets } from './getProfileWidgets'\nexport * from './getProfileWidgets'\nexport { default as getUserByUsernameOrEmail } from './getUserByUsernameOrEmail'\nexport * from './getUserByUsernameOrEmail'\nexport { default as getUserHoverCardProfile } from './getUserHoverCardProfile'\nexport * from './getUserHoverCardProfile'\nexport { default as programQuery } from './programQuery'\nexport * from './programQuery'\nexport { default as projectsAuthoredByUser } from './projectsAuthoredByUser'\nexport * from './projectsAuthoredByUser'\nexport { default as QAExpandKeyInfo } from './QAExpandKeyInfo'\nexport * from './QAExpandKeyInfo'\n", "export const KHAN_GRAPHQL_URL =\n  'https://www.khanacademy.org/api/internal/graphql'\n\n// Hopefully this doesn't cause any consequences...\nexport const FKEY = `bhavjitchauhan/khan-api_${Date.now()}`\n\nexport const PLACEHOLDER_PROGRAM_ID = 4669512406581248\n", "export interface TypedResponse<T> extends Response {\n  json(): Promise<T>\n}\n\nexport async function http<Response>(\n  url: string,\n  init?: RequestInit\n): Promise<TypedResponse<Response>> {\n  return await fetch(url, init)\n}\n\nexport async function get<Response>(\n  url: string,\n  init?: RequestInit\n): Promise<TypedResponse<Response>> {\n  init = { method: 'get', ...init }\n  return await http<Response>(url, init)\n}\n\nexport async function post<Response>(\n  url: string,\n  body: Record<string, unknown>,\n  init?: RequestInit\n): Promise<TypedResponse<Response>> {\n  init = { method: 'post', body: JSON.stringify(body), ...init }\n  return await http<Response>(url, init)\n}\n\nexport async function graphql<Variables, Response>(\n  url: string,\n  query: string,\n  variables: Variables = {} as Variables,\n  init?: RequestInit\n): Promise<TypedResponse<Response>> {\n  const body = { query, variables }\n  return await post<Response>(url, body, init)\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { AvatarSchema, UserSchema } from '../types/schema'\nimport { Kaid } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\n\nexport namespace AvatarDataForProfile {\n  export const query = `query avatarDataForProfile($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    avatar {\n      name\n      imageSrc\n      __typename\n    }\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    kaid: Kaid\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    user: Pick<\n      UserSchema<Pick<AvatarSchema, '__typename' | 'imageSrc' | 'name'>>,\n      '__typename' | 'avatar' | 'id' | 'kaid'\n    > | null\n  }\n}\n\n/**\n * Low-level function for making a `avatarDataForProfile` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#256c194a-f6d5-4c7a-aaa5-97792cdba1b3 | Reference}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.avatarDataForProfile({\n *   kaid: 'kaid_326465577260382527912172'\n * })\n * const json = await response.json()\n * const profile = json.data.user\n * const avatar = profile.avatar\n * ```\n */\nexport default function avatarDataForProfile(\n  variables: AvatarDataForProfile.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<AvatarDataForProfile.Response>>\n/**\n * @example\n * Alternative usage:\n * ```js\n * const response = await queries.avatarDataForProfile('kaid_326465577260382527912172')\n * const json = await response.json()\n * const profile = json.data.user\n * const avatar = profile.avatar\n * ```\n */\nexport default function avatarDataForProfile(\n  kaid: Kaid,\n  init?: RequestInit\n): Promise<TypedResponse<AvatarDataForProfile.Response>>\nexport default function avatarDataForProfile(\n  variablesOrKaid: AvatarDataForProfile.Variables | Kaid,\n  init?: RequestInit\n) {\n  return graphql<AvatarDataForProfile.Variables, AvatarDataForProfile.Response>(\n    `${KHAN_GRAPHQL_URL}/avatarDataForProfile`,\n    AvatarDataForProfile.query,\n    typeof variablesOrKaid === 'string'\n      ? { kaid: variablesOrKaid }\n      : variablesOrKaid,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { FeedbackFocusKind, FeedbackSort, FeedbackType } from '../types/enums'\nimport { StandardResponse } from '../types/responses'\nimport { FeedbackForFocusSchema } from '../types/schema'\nimport { graphql } from '../utils/fetch'\n\nexport namespace FeedbackQuery {\n  export const query =\n    `query feedbackQuery($topicId: String!, $focusKind: String!, $cursor: String, $limit: Int, $feedbackType: FeedbackType!, $currentSort: Int, $qaExpandKey: String) {\n  feedback(focusId: $topicId, cursor: $cursor, limit: $limit, feedbackType: $feedbackType, focusKind: $focusKind, sort: $currentSort, qaExpandKey: $qaExpandKey, answersLimit: 1) {\n    feedback {\n      replyCount\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      badges {\n        name\n        icons {\n          smallUrl\n          __typename\n        }\n        description\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flaggedByUser\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      ... on QuestionFeedback {\n        hasAnswered\n        answers {\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        isOld\n        answerCount\n        __typename\n      }\n      ... on AnswerFeedback {\n        question {\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    cursor\n    isComplete\n    sortedByDate\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    topicId: string\n    focusKind: FeedbackFocusKind\n    cursor?: string\n    limit?: number\n    feedbackType: FeedbackType\n    currentSort: FeedbackSort | number | null\n    qaExpandKey?: string | null\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    feedback: FeedbackForFocusSchema\n  }\n}\n\n/**\n * Low-level for making a `feedbackQuery` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#e7abb177-fe2b-4e49-a003-5f9be43b90e4 | Reference}\n */\nexport default function feedbackQuery(\n  variables: FeedbackQuery.Variables,\n  init?: RequestInit\n) {\n  return graphql<FeedbackQuery.Variables, FeedbackQuery.Response>(\n    `${KHAN_GRAPHQL_URL}/feedbackQuery`,\n    FeedbackQuery.query,\n    variables,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { BasicFeedbackSchema } from '../types/schema'\nimport { EncryptedFeedbackKey, FeedbackKey } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\n\nexport namespace GetFeedbackReplies {\n  export const query = `query getFeedbackReplies($postKey: String!) {\n  feedbackReplies(feedbackKey: $postKey) {\n    expandKey\n    appearsAsDeleted\n    author {\n      id\n      kaid\n      nickname\n      avatar {\n        name\n        imageSrc\n        __typename\n      }\n      __typename\n    }\n    content\n    date\n    definitelyNotSpam\n    deleted\n    downVoted\n    expandKey\n    feedbackType\n    flaggedBy\n    flaggedByUser\n    flags\n    focusUrl\n    fromVideoAuthor\n    key\n    lowQualityScore\n    notifyOnAnswer\n    permalink\n    qualityKind\n    replyCount\n    replyExpandKeys\n    showLowQualityNotice\n    sumVotesIncremented\n    upVoted\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    postKey: FeedbackKey | EncryptedFeedbackKey\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    feedbackReplies: Pick<\n      BasicFeedbackSchema,\n      | '__typename'\n      | 'appearsAsDeleted'\n      | 'author'\n      | 'content'\n      | 'date'\n      | 'definitelyNotSpam'\n      | 'deleted'\n      | 'downVoted'\n      | 'expandKey'\n      | 'feedbackType'\n      | 'flaggedBy'\n      | 'flaggedByUser'\n      | 'flags'\n      | 'focusUrl'\n      | 'fromVideoAuthor'\n      | 'key'\n      | 'lowQualityScore'\n      | 'notifyOnAnswer'\n      | 'permalink'\n      | 'qualityKind'\n      | 'replyCount'\n      | 'replyExpandKeys'\n      | 'showLowQualityNotice'\n      | 'sumVotesIncremented'\n      | 'upVoted'\n    >[]\n  }\n}\n\n/**\n * Low-level function for making a `getFeedbackReplies` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#3d616591-a38f-4bec-9836-367dba32a2ac | Reference}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.getFeedbackReplies({\n *  postKey: 'ag5zfmtoYW4tYWNhZGVteXJBCxIIVXNlckRhdGEiHmthaWRfNjYzMzc5NDA2ODA0Nzc0MjA1NjU0NTUzNAwLEghGZWVkYmFjaxiAgOPjx8-XCAw'\n * })\n * const json = await response.json()\n * const replies = json.data.feedbackReplies\n * ```\n */\nexport default function getFeedbackReplies(\n  variables: GetFeedbackReplies.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<GetFeedbackReplies.Response>>\n/**\n * @example\n * Alternative usage:\n * ```js\n * const await queries.getFeedbackReplies('ag5zfmtoYW4tYWNhZGVteXJBCxIIVXNlckRhdGEiHmthaWRfNjYzMzc5NDA2ODA0Nzc0MjA1NjU0NTUzNAwLEghGZWVkYmFjaxiAgOPjx8-XCAw')\n * const json = await response.json()\n * const replies = json.data.feedbackReplies\n * ```\n */\nexport default function getFeedbackReplies(\n  postKey: FeedbackKey | EncryptedFeedbackKey,\n  init?: RequestInit\n): Promise<TypedResponse<GetFeedbackReplies.Response>>\nexport default function getFeedbackReplies(\n  variablesOrPostKey:\n    | GetFeedbackReplies.Variables\n    | FeedbackKey\n    | EncryptedFeedbackKey,\n  init?: RequestInit\n) {\n  return graphql<GetFeedbackReplies.Variables, GetFeedbackReplies.Response>(\n    `${KHAN_GRAPHQL_URL}/getFeedbackReplies`,\n    GetFeedbackReplies.query,\n    typeof variablesOrPostKey === 'string'\n      ? { postKey: variablesOrPostKey }\n      : variablesOrPostKey,\n    init\n  )\n}\n", "/**\n * Shorten a string to a given length\n *\n * @param length Length to shorten to including postfix\n * @param postfix Postfix to append to the end of the string\n */\nexport function truncate(str: string, length: number, postfix = '...') {\n  length = Math.max(0, length)\n  return str.length > length\n    ? str.slice(0, length - postfix.length) + postfix\n    : str\n}\n\n/**\n * Converts URL-safe Base64 to standard Base64\n */\nexport function toStandardBase64(base64: string) {\n  return base64.replace(/-/g, '+').replace(/_/g, '/')\n}\n\n/**\n * Converts standard Base64 to URL-safe Base64\n */\nexport function toURLSafeBase64(base64: string) {\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n}\n", "import {\n  GoogleID,\n  Kaid,\n  EncryptedFeedbackKey,\n  FeedbackKey,\n  ProgramKey,\n  QualarooID,\n  ProgramURL,\n  ProgramID,\n  Email,\n} from '../types/strings'\nimport { toStandardBase64 } from './format'\n\nfunction matchify(regex: RegExp) {\n  return new RegExp(`(${regex.source.slice(1, -1)})`)\n}\n\nexport const KaidRegex = /^kaid_\\d{20,25}$/\nexport const KaidRegexMatch = matchify(KaidRegex)\nexport const isKaid = (str: string): str is Kaid => KaidRegex.test(str)\n\nexport const PROGRAM_ID_LENGTHS = [9, 10, 16] as const\nexport const ProgramIDRegex = new RegExp(\n  `^[1-9](?:(?:${PROGRAM_ID_LENGTHS.map((v) => `\\\\d{${v - 1}}`).join('|')}))$`\n)\nexport const ProgramIDRegexMatch = new RegExp(\n  `(?:^|\\\\D)(${ProgramIDRegex.source.slice(1, -1)})(?:$|\\\\D)`\n)\n\nexport function isProgramID(strOrNum: string | number): strOrNum is ProgramID {\n  return ProgramIDRegex.test(strOrNum.toString())\n}\n\nexport const PROGRAM_URL_TLDS = ['com', 'org'] as const\nexport const PROGRAM_URL_LOCALES = [\n  'as',\n  'az',\n  'cs',\n  'da',\n  'el',\n  'gu',\n  'hu',\n  'id',\n  'it',\n  'lt',\n  'ja',\n  'kk',\n  'kn',\n  'ky',\n  'lv',\n  'mn',\n  'mr',\n  'my',\n  'nl',\n  'pt-pt',\n  'ru',\n  'sv',\n  'ta',\n  'uz',\n  'bg',\n  'bn',\n  'de',\n  'en',\n  'es',\n  'fr',\n  'hi',\n  'hy',\n  'ka',\n  'km',\n  'ko',\n  'nb',\n  'pa',\n  'pl',\n  'pt',\n  'ro',\n  'sr',\n  'tr',\n  'vi',\n  'zh-hans',\n  'sgn-us',\n] as const\nexport const PROGRAM_URL_PATHS = [\n  'computer-programming',\n  'cs',\n  'pixar',\n  'nasa',\n  'piab-sandbox',\n  'computer-science',\n  'hour-of-code',\n  'math',\n  'differential-equations',\n  'electrical-engineering',\n  'mcat',\n  'apchem-topic',\n  'chemistry',\n  'art-history-basics',\n  'biology',\n] as const\nexport const ProgramURLRegex = new RegExp(\n  `^https?:\\\\/\\\\/(?:(?:www|${PROGRAM_URL_LOCALES.join(\n    '|'\n  )})\\\\.)?khanacademy\\\\.(?:${PROGRAM_URL_TLDS.join(\n    '|'\n  )})\\\\/(?:${PROGRAM_URL_PATHS.join(\n    '|'\n  )})\\\\/[\\\\w\\\\d-.~()'!*:@,;]+\\\\/(${ProgramIDRegex.toString().slice(2, -2)})$`,\n  'i'\n)\nexport const ProgramURLRegexMatch = matchify(ProgramURLRegex)\n\nexport function isProgramURL(str: string): str is ProgramURL {\n  return ProgramURLRegex.test(str)\n}\n\nexport const ProgramImagePathRegex = new RegExp(\n  `^\\\\/(?:${PROGRAM_URL_PATHS.join(\n    '|'\n  )})\\\\/[\\\\w\\\\d-.~()'!*:@,;]+\\\\/\\\\d+\\\\/(\\\\d+)\\\\.png$`\n)\nexport const ProgramImagePathRegexMatch = matchify(ProgramImagePathRegex)\n\nexport const PROGRAM_KEY_LENGTHS = [51, 54] as const\nexport const ProgramKeyRegex =\n  /^ag5zfmtoYW4tYWNhZGVteXI(?:U|X)CxIKU2NyYXRjaHBhZB(?:i|j)(?=[\\w-]*$)(?:.{7}w|.{9}C(?:g|w|A|Q)w)$/\nexport const ProgramKeyRegexMatch = matchify(ProgramKeyRegex)\n\n/**\n * Checks if a string is a valid program key\n *\n * @remarks\n * This function will only check the format of the string and not the existence\n * of the program on Khan Academy.\n *\n * Program keys are not the same format as lesson keys or other keys\n * that may look similar at first glance.\n *\n * This function has been tested against more than 1,000,000 program keys but it\n * is possible that in the future, new program key formats will be introduced.\n */\nexport function isProgramKey(str: string): str is ProgramKey {\n  if (PROGRAM_KEY_LENGTHS.includes(str.length as 51 | 54)) return false\n  if (!ProgramKeyRegex.test(str)) return false\n\n  try {\n    atob(toStandardBase64(str))\n    return true\n  } catch {\n    return false\n  }\n}\n\n// For some reason, there are 3 keys with 103 characters. There's no way anyone\n// is going to actually test those keys so I don't consider them valid\nexport const MESSAGE_KEY_LENGTHS = [106, 107, 108, 110, 111] as const\nexport const FeedbackKeyRegex =\n  /^ag5zfmtoYW4tYWNhZGVteX(?:I|J)(?:A|B|7|9|-|_)CxIIVXNlckRhdGEi(?:Gm|GG|G2|Hm|HG|HW)thaWRf(?:M|N|O)(?:\\w{34}|\\w{29,31}|\\w{27})(?:LEghGZWVkYmFjaxiAg[I-P](?:O|P|W|X|2|3)|DAsSCEZlZWRiYWNrGICA|MCxIIRmVlZGJhY2sYgI(?:C|D)|wLEghGZWVkYmFjaxiAg|DAsSCEZlZWRiYWNrGICA)(?:[\\w-]{5}|[\\w-]{7,8})(?:M|DA|C(?:g|w|A|Q)w)$/\nexport const FeedbackKeyRegexMatch = matchify(FeedbackKeyRegex)\nexport const isFeedbackKey = (str: string): str is FeedbackKey =>\n  FeedbackKeyRegex.test(str)\n\nexport const MESSAGE_ENCRYPTED_KEY_LENGTHS = [301] as const\nexport const MessageEncryptedKeyRegex =\n  /^kaencrypted_[a-z0-9]{32}_[a-z0-9]{256}$/\nexport const MessageEncryptedKeyRegexMatch = matchify(MessageEncryptedKeyRegex)\nexport const isEncryptedFeedbackKey = (\n  str: string\n): str is EncryptedFeedbackKey => MessageEncryptedKeyRegex.test(str)\n\nexport const GoogleIDRegex = /^http:\\/\\/googleid\\.khanacademy\\.org\\/(\\d+)$/\nexport const GoogleIDRegexMatch = matchify(GoogleIDRegex)\nexport const isGoogleID = (str: string): str is GoogleID =>\n  GoogleIDRegex.test(str)\n\nexport const QualarooIDRegex = /^_gae_bingo_random:(\\w+-\\w+-\\w+)$/\nexport const QualarooIDRegexMatch = matchify(QualarooIDRegex)\nexport const isQualarooID = (str: string): str is QualarooID =>\n  QualarooIDRegex.test(str)\n\nexport const EmailRegex =\n  /^[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\nexport const EmailRegexMatch = matchify(EmailRegex)\nexport const isEmail = (str: string): str is Email => EmailRegex.test(str)\n", "import { graphql, TypedResponse } from '../utils/fetch'\nimport { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { Kaid } from '../types/strings'\nimport { ProfileSchema, UserSchema } from '../types/schema'\nimport { isKaid } from '../utils/regexes'\n\nexport namespace GetFullUserProfile {\n  export const query =\n    `query getFullUserProfile($kaid: String, $username: String) {\n  user(kaid: $kaid, username: $username) {\n    id\n    kaid\n    key\n    userId\n    email\n    username\n    profileRoot\n    gaUserId\n    qualarooId\n    isPhantom\n    isDeveloper: hasPermission(name: \"can_do_what_only_admins_can_do\")\n    isCurator: hasPermission(name: \"can_curate_tags\", scope: ANY_ON_CURRENT_LOCALE)\n    isCreator: hasPermission(name: \"has_creator_role\", scope: ANY_ON_CURRENT_LOCALE)\n    isPublisher: hasPermission(name: \"can_publish\", scope: ANY_ON_CURRENT_LOCALE)\n    isModerator: hasPermission(name: \"can_moderate_users\", scope: GLOBAL)\n    isParent\n    isTeacher\n    isDataCollectible\n    isChild\n    isOrphan\n    isCoachingLoggedInUser\n    canModifyCoaches\n    nickname\n    hideVisual\n    joined\n    points\n    countVideosCompleted\n    bio\n    profile {\n      accessLevel\n      __typename\n    }\n    soundOn\n    muteVideos\n    showCaptions\n    prefersReducedMotion\n    noColorInVideos\n    newNotificationCount\n    canHellban: hasPermission(name: \"can_ban_users\", scope: GLOBAL)\n    canMessageUsers: hasPermission(name: \"can_send_moderator_messages\", scope: GLOBAL)\n    isSelf: isActor\n    hasStudents: hasCoachees\n    hasClasses\n    hasChildren\n    hasCoach\n    badgeCounts\n    homepageUrl\n    isMidsignupPhantom\n    includesDistrictOwnedData\n    canAccessDistrictsHomepage\n    preferredKaLocale {\n      id\n      kaLocale\n      status\n      __typename\n    }\n    underAgeGate {\n      parentEmail\n      daysUntilCutoff\n      approvalGivenAt\n      __typename\n    }\n    authEmails\n    signupDataIfUnverified {\n      email\n      emailBounced\n      __typename\n    }\n    pendingEmailVerifications {\n      email\n      __typename\n    }\n    tosAccepted\n    shouldShowAgeCheck\n    birthMonthYear\n    lastLoginCountry\n    __typename\n  }\n  actorIsImpersonatingUser\n  isAIGuideEnabled\n  hasAccessToAIGuideDev\n}\n` as const\n\n  export interface Variables {\n    kaid?: Kaid | null\n    username?: string | null\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    actorIsImpersonatingUser: boolean\n    user: Pick<\n      UserSchema<unknown, Pick<ProfileSchema, '__typename' | 'accessLevel'>>,\n      | '__typename'\n      | 'authEmails'\n      | 'badgeCounts'\n      | 'birthMonthYear'\n      | 'bio'\n      | 'canAccessDistrictsHomepage'\n      | 'canHellban'\n      | 'canMessageUsers'\n      | 'canModifyCoaches'\n      | 'countVideosCompleted'\n      | 'email'\n      | 'gaUserId'\n      | 'hasAccessToAIGuideDev'\n      | 'hasChildren'\n      | 'hasClasses'\n      | 'hasCoach'\n      | 'hasStudents'\n      | 'hideVisual'\n      | 'homepageUrl'\n      | 'id'\n      | 'includesDistrictOwnedData'\n      | 'isAIGuideEnabled'\n      | 'isChild'\n      | 'isCoachingLoggedInUser'\n      | 'isCreator'\n      | 'isCurator'\n      | 'isDataCollectible'\n      | 'isDeveloper'\n      | 'isMidsignupPhantom'\n      | 'isModerator'\n      | 'isOrphan'\n      | 'isParent'\n      | 'isPhantom'\n      | 'isPublisher'\n      | 'isSelf'\n      | 'isTeacher'\n      | 'joined'\n      | 'kaid'\n      | 'key'\n      | 'lastLoginCountry'\n      | 'muteVideos'\n      | 'newNotificationCount'\n      | 'nickname'\n      | 'noColorInVideos'\n      | 'pendingEmailVerifications'\n      | 'points'\n      | 'preferredKaLocale'\n      | 'prefersReducedMotion'\n      | 'profile'\n      | 'profileRoot'\n      | 'qualarooId'\n      | 'shouldShowAgeCheck'\n      | 'showCaptions'\n      | 'signupDataIfUnverified'\n      | 'soundOn'\n      | 'tosAccepted'\n      | 'underAgeGate'\n      | 'userId'\n      | 'username'\n    > | null\n  }\n}\n\n/**\n * Low-level function for making a `getFullUserProfile` request.\n *\n * @remarks\n * This request does not require authentication but some fields will be returned\n * as `null`.\n *\n * If, for some reason, both `kaid` and `username` are provided, Khan Academy\n * will use `kaid` and ignore `username`.\n *\n * @param variables Fetches profile associated with any cookies if not provided\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#9ae4c690-be8a-4b57-acfc-07a4870a5ee3 | Reference}\n *\n * @see {@link Client!Client.getUser}\n *\n * @example\n * Get profile by KAID, without error handling:\n * ```js\n * const response = await queries.getFullUserProfile({ kaid: 'kaid_326465577260382527912172' })\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n *\n * @example\n * Similarly, get profile by username:\n * ```js\n * const response = await queries.getFullUserProfile({ username: 'sal' })\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n *\n * @example\n * If no variables are provided or an empty object is passed in, Khan Academy\n * will use any cookies included with the request to fetch the profile\n * associated with them:\n * ```js\n * const response = await queries.getFullUserProfile(null, {\n *  headers: { cookie: 'KAAS=...' }\n * })\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n */\nexport default function getFullUserProfile(\n  variables?: GetFullUserProfile.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<GetFullUserProfile.Response>>\n/**\n * @example\n * Alternative usage by KAID:\n * ```js\n * const response = await queries.getFullUserProfile('kaid_326465577260382527912172')\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n */\nexport default function getFullUserProfile(\n  kaid?: Kaid,\n  init?: RequestInit\n): Promise<TypedResponse<GetFullUserProfile.Response>>\n/**\n * @example\n * Similarly, by username:\n * ```js\n * const response = await queries.getFullUserProfile('sal')\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n */\nexport default function getFullUserProfile(\n  username?: string,\n  init?: RequestInit\n): Promise<TypedResponse<GetFullUserProfile.Response>>\nexport default function getFullUserProfile(\n  variablesOrIdentifier?: GetFullUserProfile.Variables | Kaid | string,\n  init?: RequestInit\n) {\n  return graphql<GetFullUserProfile.Variables, GetFullUserProfile.Response>(\n    `${KHAN_GRAPHQL_URL}/getFullUserProfile`,\n    GetFullUserProfile.query,\n    typeof variablesOrIdentifier === 'string'\n      ? isKaid(variablesOrIdentifier)\n        ? { kaid: variablesOrIdentifier }\n        : { username: variablesOrIdentifier }\n      : variablesOrIdentifier,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport {\n  ListProgramsSchema,\n  ProfileSchema,\n  ProgramSchema,\n  UserSchema,\n  UserSummarySchema,\n} from '../types/schema'\nimport { Kaid } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\nimport { isKaid } from '../utils/regexes'\n\nexport namespace GetProfileWidgets {\n  export const query = `query getProfileWidgets($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    kaid\n    badgeCounts\n    isChild\n    profile {\n      programs {\n        id\n        authorKaid\n        authorNickname\n        deleted\n        displayableSpinoffCount\n        imagePath\n        key\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    programs(sort: TOP, pageInfo: {itemsPerPage: 2}) {\n      programs {\n        id\n        authorKaid\n        authorNickname\n        deleted\n        displayableSpinoffCount\n        imagePath\n        key\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  userSummary(kaid: $kaid) {\n    statistics {\n      answers\n      comments\n      flags\n      projectanswers\n      projectquestions\n      questions\n      replies\n      votes\n      __typename\n    }\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    kaid: Kaid\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    user: Pick<\n      UserSchema<\n        unknown,\n        Pick<ProfileSchema, '__typename' | 'programs'>,\n        ListProgramsSchema<\n          Pick<\n            ProgramSchema,\n            | '__typename'\n            | 'authorKaid'\n            | 'authorNickname'\n            | 'deleted'\n            | 'displayableSpinoffCount'\n            | 'id'\n            | 'imagePath'\n            | 'key'\n            | 'sumVotesIncremented'\n            | 'url'\n          > & {\n            translatedTitle: ProgramSchema['title']\n          }\n        >\n      >,\n      | '__typename'\n      | 'badgeCounts'\n      | 'id'\n      | 'isChild'\n      | 'kaid'\n      | 'profile'\n      | 'programs'\n    >\n    /**\n     * Will still be defined even if the user doesn't exist, but all values will be 0\n     */\n    userSummary: UserSummarySchema\n  }\n}\n\n/**\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#d88fe317-8705-43d7-a811-5d93316dd4a2 | Reference}\n */\nexport default function getProfileWidgets(\n  variables: GetProfileWidgets.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<GetProfileWidgets.Response>>\nexport default function getProfileWidgets(\n  kaid: Kaid,\n  init?: RequestInit\n): Promise<TypedResponse<GetProfileWidgets.Response>>\nexport default function getProfileWidgets(\n  variablesOrKaid: GetProfileWidgets.Variables | Kaid,\n  init?: RequestInit\n) {\n  return graphql<GetProfileWidgets.Variables, GetProfileWidgets.Response>(\n    `${KHAN_GRAPHQL_URL}/getProfileWidgets`,\n    GetProfileWidgets.query,\n    typeof variablesOrKaid === 'string' && isKaid(variablesOrKaid)\n      ? { kaid: variablesOrKaid }\n      : variablesOrKaid,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { UserSchema } from '../types/schema'\nimport { Email } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\nimport { isEmail } from '../utils/regexes'\n\nexport namespace GetUserByUsernameOrEmail {\n  export const query =\n    `query getUserByUsernameOrEmail($username: String, $email: String) {\n  user(username: $username, email: $email) {\n    id\n    kaid\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    username?: string\n    email?: string\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    user: Pick<UserSchema, '__typename' | 'id' | 'kaid'> | null\n  }\n}\n\n/**\n * Get KAID by username or email.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#46e24c10-e98e-4900-bd53-b02d93f8e3c9 | Reference}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.getUserByUsernameOrEmail({\n *   username: 'sal'\n * })\n * const json = await response.json()\n * const kaid = json.data.user?.kaid\n * ```\n *\n * @example\n * Similarly, get KAID by email:\n * ```js\n * const response = await queries.getUserByUsernameOrEmail({\n *  email: 'sal@khanacademy.org'\n * })\n * const json = await response.json()\n * const kaid = json.data.user?.kaid\n * ```\n */\nexport default function getUserByUsernameOrEmail(\n  variables: GetUserByUsernameOrEmail.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<GetUserByUsernameOrEmail.Response>>\n/**\n * @example\n * Alternative usage by username:\n * ```js\n * const response = await queries.getUserByUsernameOrEmail('sal')\n * const json = await response.json()\n * const kaid = json.data.user?.kaid\n * ```\n */\nexport default function getUserByUsernameOrEmail(\n  username: string,\n  init?: RequestInit\n): Promise<TypedResponse<GetUserByUsernameOrEmail.Response>>\n/**\n * @example\n * Similarly, by email:\n * ```js\n * const response = await queries.getUserByUsernameOrEmail('sal@khanacademy.org')\n * const json = await response.json()\n * const kaid = json.data.user?.kaid\n * ```\n */\nexport default function getUserByUsernameOrEmail(\n  email: Email,\n  init?: RequestInit\n): Promise<TypedResponse<GetUserByUsernameOrEmail.Response>>\nexport default function getUserByUsernameOrEmail(\n  variablesOrIdentifier: GetUserByUsernameOrEmail.Variables | string | Email,\n  init?: RequestInit\n) {\n  return graphql<\n    GetUserByUsernameOrEmail.Variables,\n    GetUserByUsernameOrEmail.Response\n  >(\n    `${KHAN_GRAPHQL_URL}/getUserByUsernameOrEmail`,\n    GetUserByUsernameOrEmail.query,\n    typeof variablesOrIdentifier === 'string'\n      ? isEmail(variablesOrIdentifier)\n        ? { email: variablesOrIdentifier }\n        : { username: variablesOrIdentifier }\n      : variablesOrIdentifier,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { AvatarSchema, UserSchema } from '../types/schema'\nimport { Kaid } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\n\nexport namespace GetUserHoverCardProfile {\n  export const query = `query getUserHoverCardProfile($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    nickname\n    username\n    bio\n    avatar {\n      name\n      imageSrc\n      __typename\n    }\n    points\n    isPhantom\n    isActor\n    isCoachedByActor\n    userSummaryIsVisibleToActor\n    actorHasUserScopedPermission(capability: CAN_VIEW_USER_IDENTITY)\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    kaid: Kaid\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    user: Pick<\n      UserSchema<Pick<AvatarSchema, '__typename' | 'imageSrc' | 'name'>>,\n      | '__typename'\n      | 'actorHasUserScopedPermission'\n      | 'avatar'\n      | 'bio'\n      | 'id'\n      | 'isActor'\n      | 'isCoachedByActor'\n      | 'isPhantom'\n      | 'kaid'\n      | 'nickname'\n      | 'points'\n      | 'userSummaryIsVisibleToActor'\n      | 'username'\n    > | null\n  }\n}\n\n/**\n * Low-level function for making a `getUserHoverCardProfile` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#6de1d62b-d8b4-425e-b0f2-305be6279718 | Reference}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.getUserHoverCardProfile({\n *   kaid: 'kaid_326465577260382527912172'\n * })\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n */\nexport default function getUserHoverCardProfile(\n  variables: GetUserHoverCardProfile.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<GetUserHoverCardProfile.Response>>\n/**\n * @example\n * Alternative usage:\n * ```js\n * const response = await queries.getUserHoverCardProfile('kaid_326465577260382527912172')\n * const json = await response.json()\n * const profile = json.data.user\n * ```\n */\nexport default function getUserHoverCardProfile(\n  kaid: Kaid,\n  init?: RequestInit\n): Promise<TypedResponse<GetUserHoverCardProfile.Response>>\nexport default function getUserHoverCardProfile(\n  variablesOrKaid: GetUserHoverCardProfile.Variables | Kaid,\n  init?: RequestInit\n) {\n  return graphql<\n    GetUserHoverCardProfile.Variables,\n    GetUserHoverCardProfile.Response\n  >(\n    `${KHAN_GRAPHQL_URL}/getUserHoverCardProfile`,\n    GetUserHoverCardProfile.query,\n    typeof variablesOrKaid === 'string'\n      ? { kaid: variablesOrKaid }\n      : variablesOrKaid,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { ProgramSchema, UserSchema } from '../types/schema'\nimport { ProgramID } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\n\nexport namespace ProgramQuery {\n  export const query = `query programQuery($programId: String!) {\n  programById(id: $programId) {\n    byChild\n    category\n    created\n    creatorProfile: author {\n      id\n      nickname\n      profileRoot\n      profile {\n        accessLevel\n        __typename\n      }\n      __typename\n    }\n    deleted\n    description\n    spinoffCount: displayableSpinoffCount\n    docsUrlPath\n    flags\n    flaggedBy: flaggedByKaids\n    flaggedByUser: isFlaggedByCurrentUser\n    height\n    hideFromHotlist\n    id\n    imagePath\n    isProjectOrFork: originIsProject\n    isOwner\n    kaid: authorKaid\n    key\n    newUrlPath\n    originScratchpad: originProgram {\n      deleted\n      translatedTitle\n      url\n      __typename\n    }\n    restrictPosting\n    revision: latestRevision {\n      id\n      code\n      configVersion\n      created\n      editorType\n      folds\n      __typename\n    }\n    slug\n    sumVotesIncremented\n    title\n    topic: parentCurationNode {\n      id\n      nodeSlug: slug\n      relativeUrl\n      slug\n      translatedTitle\n      __typename\n    }\n    translatedTitle\n    url\n    userAuthoredContentType\n    upVoted\n    width\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    programId: string\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    programById: Pick<\n      ProgramSchema<\n        Pick<\n          UserSchema,\n          '__typename' | 'id' | 'kaid' | 'nickname' | 'profile' | 'profileRoot'\n        >\n      >,\n      | '__typename'\n      | 'byChild'\n      | 'category'\n      | 'created'\n      | 'creatorProfile'\n      | 'deleted'\n      | 'description'\n      | 'docsUrlPath'\n      | 'flaggedBy'\n      | 'flaggedByUser'\n      | 'flags'\n      | 'height'\n      | 'hideFromHotlist'\n      | 'id'\n      | 'imagePath'\n      | 'isOwner'\n      | 'isProjectOrFork'\n      | 'kaid'\n      | 'key'\n      | 'newUrlPath'\n      | 'originScratchpad'\n      | 'restrictPosting'\n      | 'revision'\n      | 'slug'\n      | 'spinoffCount'\n      | 'sumVotesIncremented'\n      | 'title'\n      | 'topic'\n      | 'translatedTitle'\n      | 'upVoted'\n      | 'url'\n      | 'userAuthoredContentType'\n      | 'width'\n    > | null\n  }\n}\n\n/**\n * Low-level function for making a `programQuery` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#77a4642b-3580-4409-b837-1ac82a487c35 | Reference}\n *\n * @see {@link Client!Client.getProgram}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.programQuery({\n *  programId: '6058668928843776'\n * })\n * const json = await response.json()\n * const program = json.data.programById\n * ```\n */\nexport default function programQuery(\n  variables: ProgramQuery.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<ProgramQuery.Response>>\n/**\n * @example\n * Alternative usage:\n * ```js\n * const response = await queries.programQuery(6058668928843776)\n * const json = await response.json()\n * const program = json.data.programById\n * ```\n */\nexport default function programQuery(\n  programId: ProgramID,\n  init?: RequestInit\n): Promise<TypedResponse<ProgramQuery.Response>>\nexport default function programQuery(\n  variablesOrProgramId: ProgramQuery.Variables | ProgramID,\n  init?: RequestInit\n) {\n  return graphql<ProgramQuery.Variables, ProgramQuery.Response>(\n    `${KHAN_GRAPHQL_URL}/programQuery`,\n    ProgramQuery.query,\n    typeof variablesOrProgramId === 'number'\n      ? { programId: variablesOrProgramId.toString() }\n      : typeof variablesOrProgramId === 'string'\n      ? { programId: variablesOrProgramId }\n      : variablesOrProgramId,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { ListProgramSortOrder } from '../types/enums'\nimport { StandardResponse } from '../types/responses'\nimport { ListProgramsSchema, ProgramSchema, UserSchema } from '../types/schema'\nimport { Kaid } from '../types/strings'\nimport { graphql } from '../utils/fetch'\n\nexport namespace ProjectsAuthoredByUser {\n  export const query =\n    `query projectsAuthoredByUser($kaid: String, $pageInfo: ListProgramsPageInfo, $sort: ListProgramSortOrder) {\n  user(kaid: $kaid) {\n    id\n    programs(pageInfo: $pageInfo, sort: $sort) {\n      complete\n      cursor\n      programs {\n        id\n        key\n        authorKaid\n        authorNickname\n        displayableSpinoffCount\n        imagePath\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    kaid: Kaid\n    pageInfo?: {\n      cursor?: string | null\n      itemsPerPage: number\n    }\n    sort?: ListProgramSortOrder\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    user: Pick<\n      UserSchema<\n        unknown,\n        unknown,\n        ListProgramsSchema<\n          Pick<\n            ProgramSchema,\n            | '__typename'\n            | 'authorKaid'\n            | 'authorNickname'\n            | 'displayableSpinoffCount'\n            | 'id'\n            | 'imagePath'\n            | 'key'\n            | 'sumVotesIncremented'\n            | 'url'\n          > & {\n            translatedTitle: ProgramSchema['title']\n          }\n        >\n      >,\n      '__typename' | 'id' | 'kaid' | 'programs'\n    >\n  }\n}\n\n/**\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#fe90a093-1deb-48bc-98a0-116275b2f512 | Reference}\n */\nexport default function projectsAuthoredByUser(\n  variables: ProjectsAuthoredByUser.Variables,\n  init?: RequestInit\n) {\n  return graphql<\n    ProjectsAuthoredByUser.Variables,\n    ProjectsAuthoredByUser.Response\n  >(\n    `${KHAN_GRAPHQL_URL}/projectsAuthoredByUser`,\n    ProjectsAuthoredByUser.query,\n    variables,\n    init\n  )\n}\n", "import { KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { QaExpandKeyInfoSchema } from '../types/schema'\nimport { EncryptedFeedbackKey } from '../types/strings'\nimport { graphql, TypedResponse } from '../utils/fetch'\n\nexport namespace QaExpandKeyInfo {\n  export const query = `query QAExpandKeyInfo($encryptedKey: String) {\n  qaExpandKeyInfo(encryptedQaExpandKey: $encryptedKey) {\n    feedbackType\n    unencryptedKey\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    encryptedKey: string\n  }\n\n  export type Response = StandardResponse<Data>\n\n  export type Data = {\n    qaExpandKeyInfo: QaExpandKeyInfoSchema\n  }\n}\n\n/**\n * Low-level function for making a `QAExpandKeyInfo` request.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#2354cba6-9065-4431-8d4a-f44f24527eb4 | Reference}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await queries.QAExpandKeyInfo({\n *  encryptedKey: 'kaencrypted_e1af9ca95e8bf24e1cebdb8a1e94f7a3_76142801656102acc04c5154ee776b59e6323603d457c39e2a18a68f32a9ac1fefcdfd57c28ec771ec62fbee8ae03e0509090d80723bb489a87010ba69a0a5fdbd27a91a0db97971b59b77548da0eb2494aa274600fa28939e8975abd13c851c5a2f4f701d7dc7e8a2879f3c8d59be0953fafa318bd9b036f6c3d6dc0212c926'\n * })\n * const json = await response.json()\n * const unencryptedKey = json.data.qaExpandKeyInfo?.unencryptedKey\n * ```\n */\nexport default function QAExpandKeyInfo(\n  variables: QaExpandKeyInfo.Variables,\n  init?: RequestInit\n): Promise<TypedResponse<QaExpandKeyInfo.Response>>\n/**\n * @example\n * Alternative usage:\n * ```js\n * const response = await queries.QAExpandKeyInfo('kaencrypted_e1af9ca95e8bf24e1cebdb8a1e94f7a3_76142801656102acc04c5154ee776b59e6323603d457c39e2a18a68f32a9ac1fefcdfd57c28ec771ec62fbee8ae03e0509090d80723bb489a87010ba69a0a5fdbd27a91a0db97971b59b77548da0eb2494aa274600fa28939e8975abd13c851c5a2f4f701d7dc7e8a2879f3c8d59be0953fafa318bd9b036f6c3d6dc0212c926')\n * const json = await response.json()\n * const unencryptedKey = json.data.qaExpandKeyInfo?.unencryptedKey\n * ```\n */\nexport default function QAExpandKeyInfo(\n  encryptedKey: EncryptedFeedbackKey,\n  init?: RequestInit\n): Promise<TypedResponse<QaExpandKeyInfo.Response>>\nexport default function QAExpandKeyInfo(\n  variablesOrEncryptedKey: QaExpandKeyInfo.Variables | EncryptedFeedbackKey,\n  init?: RequestInit\n) {\n  return graphql<QaExpandKeyInfo.Variables, QaExpandKeyInfo.Response>(\n    `${KHAN_GRAPHQL_URL}/QAExpandKeyInfo`,\n    QaExpandKeyInfo.query,\n    typeof variablesOrEncryptedKey === 'string'\n      ? { encryptedKey: variablesOrEncryptedKey }\n      : variablesOrEncryptedKey,\n    init\n  )\n}\n", "export { default as loginWithPasswordMutation } from './loginWithPasswordMutation'\nexport * from './loginWithPasswordMutation'\n", "import { FKEY, KHAN_GRAPHQL_URL } from '../lib/constants'\nimport { StandardResponse } from '../types/responses'\nimport { UserSchema } from '../types/schema'\nimport { graphql } from '../utils/fetch'\n\nexport namespace LoginWithPasswordMutation {\n  export const query =\n    `mutation loginWithPasswordMutation($identifier: String!, $password: String!) {\n  loginWithPassword(identifier: $identifier, password: $password) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      transferAuthToken\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n` as const\n\n  export interface Variables {\n    /** Email or username */\n    identifier: string\n    password: string\n  }\n\n  export type Response = StandardResponse<{\n    loginWithPassword: {\n      __typename: 'LoginWithPasswordMutation'\n      error: {\n        __typename: 'LoginWithPasswordMutationError'\n        code: ErrorCode\n      } | null\n      isFirstLogin: boolean | null\n      user: Pick<\n        UserSchema,\n        | '__typename'\n        | 'canAccessDistrictsHomepage'\n        | 'hasUnresolvedInvitations'\n        | 'id'\n        | 'isTeacher'\n        | 'kaid'\n        | 'preferredKaLocale'\n        | 'transferAuthToken'\n      > | null\n    } | null\n  }>\n\n  export enum ErrorCode {\n    INVALID_CREDENTIALS = 'INVALID_CREDENTIALS',\n    TOO_MANY_ATTEMPTS = 'TOO_MANY_ATTEMPTS',\n  }\n}\n\n/**\n * Low-level function for making a `loginWithPasswordMutation` request.\n *\n * @remarks\n * There are many things that can go wrong with this request and Khan Academy\n * doesn't provide a great way to handle them. It's recommended to use\n * {@link Client!Client.login | Client.login} instead.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#77a4642b-3580-4409-b837-1ac82a487c35 | Reference}\n *\n * @see {@link Client!Client.login}\n *\n * @example\n * Simple usage without error handling:\n * ```js\n * const response = await mutations.loginWithPasswordMutation({\n *   identifier: 'username', // or email\n *   password: 'password',\n * })\n *\n * const cookies = response.headers.get('set-cookie')\n * ```\n */\nexport default function loginWithPasswordMutation(\n  variables: LoginWithPasswordMutation.Variables,\n  init?: RequestInit\n) {\n  return graphql<\n    LoginWithPasswordMutation.Variables,\n    LoginWithPasswordMutation.Response\n  >(\n    `${KHAN_GRAPHQL_URL}/loginWithPasswordMutation`,\n    LoginWithPasswordMutation.query,\n    variables,\n    {\n      // This is required for the request to work, see reference\n      headers: {\n        'x-ka-fkey': FKEY,\n        Cookie: `fkey=${FKEY}`,\n      },\n      ...init,\n    }\n  )\n}\n", "import Client from '../Client'\nimport { RecursivePartial } from '../utils/types'\n\n/**\n * The base class for all abstracted classes\n *\n * @remarks\n * This class is used to wrap the API schema into a more user-friendly\n * interface.\n */\nexport default abstract class Wrapper<Schema, Interface> {\n  /**\n   * The client that this base was fetched with.\n   */\n  client?: Client\n  /**\n   * The raw base schema data\n   *\n   * @remarks\n   * Only set if the base was created from a user schema.\n   */\n  rawData?: RecursivePartial<Schema>\n\n  /**\n   * Transforms a API schema into an abstracted interface\n   *\n   * @param schema The schema to transform\n   */\n  // Why can't this be static? Guess we'll find out in 2030...\n  // https://github.com/microsoft/TypeScript/issues/34516\n  abstract transformSchema(schema: RecursivePartial<Schema>): Interface\n\n  /**\n   * Creates a new class instance\n   */\n  constructor(data?: Interface)\n  constructor(client: Client, data?: Interface)\n  constructor(clientOrData: Client, data?: Interface) {\n    if (clientOrData instanceof Client) this.client = clientOrData\n    else data ??= clientOrData\n\n    if (data) this.copy(data)\n\n    return this\n  }\n\n  /**\n   * Updates data into the class\n   *\n   * @param data The data to copy from\n   * @returns The class instance\n   */\n  copy(data: Interface) {\n    Object.assign(this, data)\n\n    return this\n  }\n\n  /**\n   * Updates data from a schema into the instance\n   *\n   * @param schema The schema to copy from\n   * @returns The class instance\n   */\n  copyFromSchema(schema: RecursivePartial<Schema>) {\n    this.rawData = {\n      ...this.rawData,\n      ...schema,\n    }\n    return this.copy(this.transformSchema(schema))\n  }\n\n  /**\n   * Gets and updates the instance's data\n   *\n   * @param client The API client to use\n   */\n  abstract get(client?: Client): Promise<this>\n\n  /**\n   * Checks if the data represents the same instance\n   */\n  abstract is(data: Interface): boolean\n\n  /**\n   * Checks if the schema represents the same instance\n   */\n  isSchema(schema: RecursivePartial<Schema>) {\n    return this.is(this.transformSchema(schema))\n  }\n}\n", "/**\n * @file Low-level enums with one-to-one mappings to the API\n */\n\n/** */\nexport enum ServiceErrorCode {\n  DOWNSTREAM_SERVICE_ERROR = 'DOWNSTREAM_SERVICE_ERROR',\n}\n\nexport enum ServiceErrorName {\n  users = 'users',\n}\n\nexport enum UserAccessLevel {\n  COACH = 'COACH',\n  PUBLIC = 'PUBLIC',\n}\n\nexport enum ProgramEditorType {\n  pjs = 'pjs',\n  webpage = 'webpage',\n  ace_sql = 'ace_sql',\n  unknown = '',\n}\n\nexport enum FeedbackFocusKind {\n  Challenge = 'Challenge',\n  Interactive = 'Interactive',\n  Project = 'Project',\n  Scratchpad = 'Scratchpad',\n  Talkthrough = 'Talkthrough',\n}\n\n/**\n * @remarks\n * Not all feedback types are supported by every query/mutation.\n *\n * @link {@link https://khan-api.bhavjit.com/reference/view/19553924/2s8YzQUiXU#afc29a01-a4d7-45db-bb1f-82ea66eb210a | Reference}\n */\nexport enum FeedbackType {\n  ALL_PROJECT_ANSWER = 'ALL_PROJECT_ANSWER',\n  ALL_PROJECT_QUESTION = 'ALL_PROJECT_QUESTION',\n  ANSWER = 'ANSWER',\n  COMMENT = 'COMMENT',\n  PROGRAM = 'PROGRAM',\n  PROJECTFEEDBACK = 'PROJECTFEEDBACK',\n  PROJECT_CRITIQUE_ANSWER = 'PROJECT_CRITIQUE_ANSWER',\n  PROJECT_CRITIQUE_QUESTION = 'PROJECT_CRITIQUE_QUESTION',\n  PROJECT_EVAL_ANSWER = 'PROJECT_EVAL_ANSWER',\n  PROJECT_EVAL_QUESTION = 'PROJECT_EVAL_QUESTION',\n  PROJECT_HELP_ANSWER = 'PROJECT_HELP_ANSWER',\n  PROJECT_HELP_QUESTION = 'PROJECT_HELP_QUESTION',\n  QUESTION = 'QUESTION',\n  REPLY = 'REPLY',\n  SUGGESTED_CLARIFICATION = 'SUGGESTED_CLARIFICATION',\n}\n\nexport enum FeedbackTypename {\n  AnswerFeedback = 'AnswerFeedback',\n  BasicFeedback = 'BasicFeedback',\n  LowQualityFeedback = 'LowQualityFeedback',\n  QuestionFeedback = 'QuestionFeedback',\n}\n\nexport enum FeedbackSort {\n  TopVoted = 1,\n  Recent = 2,\n}\n\nexport enum ListProgramSortOrder {\n  TOP = 'TOP',\n  RECENT = 'RECENT',\n}\n", "import Client from './Client'\nimport Wrapper from './lib/Wrapper'\nimport Program from './Program'\nimport { BadgeCategory } from './types/badges'\nimport { ListProgramSortOrder, UserAccessLevel } from './types/enums'\nimport { UserSchema } from './types/schema'\nimport { AvatarURL, Email, Kaid } from './types/strings'\nimport { UserStatistics } from './types/user-statistics'\nimport {\n  GoogleIDRegex,\n  isEmail,\n  isGoogleID,\n  isKaid,\n  isQualarooID,\n  QualarooIDRegex,\n} from './utils/regexes'\nimport { RecursivePartial } from './utils/types'\n\n// There has to be a solution that doesn't require duplicating properties\n// Update: there is, but it's not worth it\nexport interface IUser {\n  readonly self?: boolean\n  readonly kaid?: Kaid | null\n  readonly username?: string | null\n  readonly nickname?: string\n  readonly email?: string\n  readonly emails?: string[]\n  readonly avatar?: AvatarURL\n  readonly bio?: string\n  readonly points?: number\n  readonly badgeCounts?: Record<BadgeCategory, number>\n  readonly joined?: Date\n\n  readonly key?: string\n  readonly googleID?: string | null\n  readonly qualarooID?: string | null\n  readonly newNotifications?: number\n  readonly completedVideos?: number\n\n  readonly canAccessDistrictsHomepage?: boolean\n  readonly canHellban?: boolean\n  readonly canMessageUsers?: boolean\n  readonly canModifyCoaches?: boolean\n\n  readonly hasChildren?: boolean\n  readonly hasClasses?: boolean\n  readonly hasCoach?: boolean\n  readonly hasStudents?: boolean\n\n  readonly developer?: boolean\n  readonly moderator?: boolean\n  readonly child?: boolean\n  readonly parent?: boolean\n  readonly orphan?: boolean\n  readonly teacher?: boolean\n  readonly curator?: boolean\n  readonly publisher?: boolean\n  readonly creator?: boolean\n  readonly phantom?: boolean\n  readonly midsignupPhantom?: boolean\n\n  readonly accessLevel?: UserAccessLevel\n\n  readonly statistics?: UserStatistics\n  readonly programs?: Program[]\n}\n\nexport default class User extends Wrapper<UserSchema, IUser> implements IUser {\n  /**\n   * Whether the user is the currently authenticated user.\n   */\n  readonly self?: boolean\n  /**\n   * The user's KAID.\n   */\n  readonly kaid?: Kaid | null\n  /**\n   * The user's username. May not be set by the user.\n   */\n  readonly username?: string | null\n  /**\n   * The user's nickname. May in rare cases be `null`.\n   */\n  readonly nickname?: string\n  /**\n   * The user's email address. Required authentication.\n   */\n  readonly email?: string\n  /**\n   * The user's authentication email addresses. Required authentication.\n   */\n  readonly emails?: string[]\n  /**\n   * The user's avatar URL.\n   */\n  readonly avatar?: AvatarURL\n  /**\n   * The user's bio.\n   */\n  readonly bio?: string\n  /**\n   * The user's energy points.\n   */\n  readonly points?: number\n  /**\n   * The user's badge counts by category.\n   */\n  readonly badgeCounts?: Record<BadgeCategory, number>\n  /**\n   * The date the user created their account.\n   */\n  readonly joined?: Date\n\n  readonly key?: string\n  readonly googleID?: string | null\n  readonly qualarooID?: string | null\n  /**\n   * The number of unread notifications.\n   */\n  readonly newNotifications?: number\n  readonly completedVideos?: number\n\n  readonly canAccessDistrictsHomepage?: boolean\n  readonly canHellban?: boolean\n  /**\n   * Whether the user can send Guardian messages.\n   */\n  readonly canMessageUsers?: boolean\n  readonly canModifyCoaches?: boolean\n\n  readonly hasChildren?: boolean\n  readonly hasClasses?: boolean\n  readonly hasCoach?: boolean\n  readonly hasStudents?: boolean\n\n  readonly developer?: boolean\n  /**\n   * Whether the user is a Guardian.\n   */\n  readonly moderator?: boolean\n  /**\n   * Whether the user is a child account.\n   */\n  readonly child?: boolean\n  readonly parent?: boolean\n  readonly orphan?: boolean\n  readonly teacher?: boolean\n  readonly curator?: boolean\n  readonly publisher?: boolean\n  readonly creator?: boolean\n  readonly phantom?: boolean\n  readonly midsignupPhantom?: boolean\n\n  readonly accessLevel?: UserAccessLevel\n\n  readonly statistics?: UserStatistics\n  readonly programs?: Program[]\n\n  /**\n   * Creates a new user from the given from a user schema\n   *\n   * @description\n   * Note that `Client.getUser` will automatically call this method. This is only useful if you need to use the low-level API.\n   *\n   * @param schema\n   *\n   * @see {@link Client!Client.getUser}\n   */\n  static fromSchema(schema: RecursivePartial<UserSchema>) {\n    const user = new User()\n    user.copyFromSchema(schema)\n    user.rawData = schema\n\n    return user\n  }\n\n  static fromIdentifier(identifier: Kaid | string | Email) {\n    const user = new User({\n      kaid: isKaid(identifier) ? identifier : undefined,\n      username:\n        !isKaid(identifier) && !isEmail(identifier) ? identifier : undefined,\n      email: isEmail(identifier) ? identifier : undefined,\n    })\n\n    return user\n  }\n\n  #resolveIdentifier(): Kaid | string | Email {\n    if (this.kaid) return this.kaid\n    if (this.username) return this.username\n    if (this.email) return this.email\n\n    throw new Error('User has no identifier')\n  }\n\n  transformSchema(schema: RecursivePartial<UserSchema>) {\n    return {\n      emails: schema.authEmails ?? undefined,\n      badgeCounts: schema.badgeCounts\n        ? (JSON.parse(schema.badgeCounts) as Record<BadgeCategory, number>)\n        : undefined,\n      bio: schema.bio ?? undefined,\n      canAccessDistrictsHomepage:\n        schema.canAccessDistrictsHomepage ?? undefined,\n      canHellban: schema.canHellban ?? undefined,\n      canMessageUsers: schema.canMessageUsers ?? undefined,\n      canModifyCoaches: schema.canModifyCoaches ?? undefined,\n      completedVideos: schema.countVideosCompleted,\n      email: schema.email ?? undefined,\n      hasChildren: schema.hasChildren ?? undefined,\n      hasClasses: schema.hasClasses ?? undefined,\n      hasCoach: schema.hasCoach ?? undefined,\n      hasStudents: schema.hasStudents ?? undefined,\n      child: schema.isChild ?? undefined,\n      creator: schema.isCreator ?? undefined,\n      curator: schema.isCurator ?? undefined,\n      developer: schema.isDeveloper ?? undefined,\n      midsignupPhantom: schema.isMidsignupPhantom ?? undefined,\n      moderator: schema.isModerator ?? undefined,\n      orphan: schema.isOrphan ?? undefined,\n      parent: schema.isParent ?? undefined,\n      phantom: schema.isPhantom ?? undefined,\n      publisher: schema.isPublisher ?? undefined,\n      self: schema.isSelf ?? undefined,\n      teacher: schema.isTeacher ?? undefined,\n      joined: schema.joined ? new Date(schema.joined) : undefined,\n      kaid:\n        typeof schema.kaid === 'string' && isKaid(schema.kaid)\n          ? schema.kaid\n          : typeof schema.kaid === 'string'\n          ? null\n          : undefined,\n      key: schema.key ?? undefined,\n      newNotifications: schema.newNotificationCount ?? undefined,\n      nickname: schema.nickname ?? undefined,\n      points: schema.points ?? undefined,\n      accessLevel: schema.profile?.accessLevel,\n      googleID:\n        typeof schema.userId === 'string' && isGoogleID(schema.userId)\n          ? schema.userId.match(GoogleIDRegex)![1]\n          : typeof schema.userId === 'string'\n          ? null\n          : undefined,\n      qualarooID:\n        typeof schema.qualarooId === 'string' && isQualarooID(schema.qualarooId)\n          ? schema.qualarooId.match(QualarooIDRegex)![1]\n          : typeof schema.qualarooId === 'string'\n          ? null\n          : undefined,\n      username:\n        schema.username ??\n        (schema.profileRoot\n          ? !isKaid(schema.profileRoot.slice(9, -1))\n            ? schema.profileRoot.slice(9, -1)\n            : null\n          : schema.username),\n    }\n  }\n\n  /**\n   * Fetches the user's profile using a `getFullUserProfile` query and updates the user's data\n   *\n   * @param client Optional client to use for the request\n   */\n  async get(client = this.client ?? new Client()) {\n    const user = await client.getUser(this.#resolveIdentifier())\n\n    return this.copy(user)\n  }\n\n  async getAvatar(client = this.client ?? new Client()) {\n    const url = await client.getAvatar(this.#resolveIdentifier())\n    this.copy({ avatar: url })\n\n    return url\n  }\n\n  async getStatistics(client = this.client ?? new Client()) {\n    const statistics = await client.getUserStatistics(this.#resolveIdentifier())\n\n    return this.copy({ statistics })\n  }\n\n  /**\n   * @see {@link Client!Client.getUserPrograms}\n   */\n  async *getPrograms(\n    client = this.client ?? new Client(),\n    sort?: ListProgramSortOrder,\n    limit?: number\n  ) {\n    for await (const programs of client.getUserPrograms(\n      this.#resolveIdentifier(),\n      sort,\n      limit\n    )) {\n      if (!this.programs) this.copy({ programs: [] })\n      programs.forEach((program) => this.programs?.push(program))\n      yield programs\n    }\n\n    return this\n  }\n\n  /**\n   * @see {@link Client!Client.getAllUserPrograms}\n   */\n  async getAllPrograms(\n    client = this.client ?? new Client(),\n    sort?: ListProgramSortOrder,\n    limit?: number\n  ) {\n    const programs = await client.getAllUserPrograms(\n      this.#resolveIdentifier(),\n      sort,\n      limit\n    )\n\n    return this.copy({ programs })\n  }\n\n  /**\n   * Checks if two users are the same\n   *\n   * @param user The user to compare to\n   */\n  is(user: User | IUser) {\n    if (\n      !(this.kaid && user.kaid) &&\n      !(this.email && user.email) &&\n      !(this.key && user.key) &&\n      !(this.username && user.username) &&\n      !(this.googleID && user.googleID) &&\n      !(this.qualarooID && user.qualarooID)\n    ) {\n      console.warn(\"Users don't have any identifiers that can be compared\")\n      return false\n    }\n    return (\n      (this.kaid && user.kaid && this.kaid === user.kaid) ||\n      (this.email && user.email && this.email === user.email) ||\n      (this.key && user.key && this.key === user.key) ||\n      (this.username && user.username && this.username === user.username) ||\n      (this.googleID && user.googleID && this.googleID === user.googleID) ||\n      (this.qualarooID &&\n        user.qualarooID &&\n        this.qualarooID === user.qualarooID) ||\n      false\n    )\n  }\n}\n", "import { ServiceErrorCode, ServiceErrorName } from './enums'\n\nexport type DataResponse<T = unknown> = {\n  data: T\n}\n\nexport type ServiceErrorsResponse = {\n  data: unknown\n  errors: Array<{\n    extensions: {\n      code: ServiceErrorCode\n      serviceName: ServiceErrorName\n    }\n    message: string\n    path: Array<string>\n  }>\n}\n\nexport interface InputErrorResponse {\n  errors: Array<{\n    message: string\n  }>\n}\n\nexport type StandardResponse<T = unknown> =\n  | DataResponse<T>\n  | ServiceErrorsResponse\n  | InputErrorResponse\n\nexport function isDataResponse<T>(\n  response: StandardResponse<T>\n): response is DataResponse<T> {\n  return 'data' in response && !('errors' in response)\n}\n\nexport function isServiceErrorsResponse(\n  response: StandardResponse\n): response is ServiceErrorsResponse {\n  return (\n    'errors' in response && Array.isArray(response.errors) && 'data' in response\n  )\n}\n\nexport function isInputErrorResponse(\n  response: StandardResponse\n): response is InputErrorResponse {\n  return (\n    'errors' in response &&\n    Array.isArray(response.errors) &&\n    !('data' in response)\n  )\n}\n\nexport function assertDataResponse<T>(\n  response: StandardResponse<T>\n): asserts response is DataResponse<T> {\n  if (isServiceErrorsResponse(response))\n    throw new Error(\n      'Expected data response but got service errors response: ' +\n        response.errors.map((error) => error.message).join(', ')\n    )\n  if (isInputErrorResponse(response))\n    throw new Error(\n      'Expected data response but got input errors response: ' +\n        response.errors.map((error) => error.message).join(', ')\n    )\n  if (!isDataResponse(response))\n    throw new Error('Expected data response but got unknown response')\n}\n", "import { ProgramID, ProgramIDNumber, ProgramKey } from '../types/strings'\nimport { toStandardBase64, toURLSafeBase64 } from './format'\nimport { isProgramID, isProgramKey } from './regexes'\n\n/**\n * Decodes program ID from a program key\n *\n * @remarks\n * Program keys are (URL-safe) Base64 encoded strings that contain the program\n * ID.\n *\n * Credit to {@link https://github.com/L1quidH2O | @L1quidH2O} for the\n * original implementation.\n */\nexport function programKeyToID(key: ProgramKey): ProgramIDNumber {\n  if (!isProgramKey(key)) throw new Error('Invalid program key')\n\n  let bytes = atob(toStandardBase64(key))\n    .split('')\n    .map((char) => char.charCodeAt(0))\n\n  const version = bytes[17]\n  if (version === 20) bytes = bytes.slice(32, 37)\n  else if (version === 23) bytes = bytes.slice(34, 40)\n  else throw new Error(`Unknown program key version: ${version}`)\n\n  let result = 0n\n  for (let i = 0; i < bytes.length; i++) {\n    result |= BigInt(bytes[i] & 127) << BigInt(i * 7)\n  }\n\n  return Number(version === 20 ? result : result << 14n)\n}\n\n/**\n * Encodes program ID to a program key\n *\n * @remarks\n * Credit to {@link https://github.com/L1quidH2O | @L1quidH2O} for the\n * original implementation.\n */\nexport function programIDtoKey(id: ProgramID) {\n  if (!isProgramID(id)) throw new Error('Invalid program ID')\n\n  if (typeof id === 'string') id = parseInt(id)\n\n  const encoded = id\n    .toString(2)\n    .match(/.{1,7}(?=(.{7})*$)/g)!\n    .map((r) => String.fromCharCode(parseInt(r.length === 7 ? `1${r}` : r, 2)))\n    .reverse()\n    .join('')\n\n  let base64 = btoa(\n    `j\\x0Es~khan-academyr${\n      encoded.length === 5 ? '\\x14' : '\\x17'\n    }\\v\\x12\\nScratchpad\\x18${encoded}\\f`\n  )\n\n  base64 = toURLSafeBase64(base64)\n\n  return base64 as ProgramKey\n}\n", "import getUserByUsernameOrEmail from '../queries/getUserByUsernameOrEmail'\nimport getUserHoverCardProfile from '../queries/getUserHoverCardProfile'\nimport QAExpandKeyInfo from '../queries/QAExpandKeyInfo'\nimport { assertDataResponse } from '../types/responses'\nimport {\n  Email,\n  EncryptedFeedbackKey,\n  FeedbackKey,\n  Kaid,\n  ProgramID,\n  ProgramIDNumber,\n  ProgramKey,\n  ProgramURL,\n} from '../types/strings'\nimport { programKeyToID } from './programs'\nimport {\n  isKaid,\n  isProgramID,\n  isProgramKey,\n  isProgramURL,\n  ProgramURLRegex,\n  isEncryptedFeedbackKey,\n  isFeedbackKey,\n  isEmail,\n} from './regexes'\n\n/**\n * Resolve a KAID from a username or email address\n *\n * @param identifier A KAID, username, or email address\n *\n * @example\n * const kaid = await resolveKaid('bhavjitChauhan')\n * console.log(kaid) // kaid_376749826184384230772276\n */\nexport async function resolveKaid(\n  identifier: Kaid | string | Email\n): Promise<Kaid> {\n  if (isKaid(identifier)) return identifier\n\n  const response = await getUserByUsernameOrEmail(identifier)\n  const json = await response.json()\n\n  assertDataResponse(json)\n  if (!json.data.user) throw new Error('User not found')\n\n  const kaid = json.data.user.kaid\n  if (!isKaid(kaid)) throw new Error('User does not have a valid KAID')\n\n  return kaid\n}\n\n/**\n * Resolve a username from a KAID or email address\n *\n * @param identifier KAID, username, or email address\n *\n * @example\n * const username = await resolveUsername('kaid_376749826184384230772276')\n * console.log(username) // bhavjitChauhan\n */\nexport async function resolveUsername(identifier: Kaid | string | Email) {\n  if (!isKaid(identifier) && !isEmail(identifier)) return identifier\n\n  if (!isKaid(identifier)) identifier = await resolveKaid(identifier)\n\n  const response = await getUserHoverCardProfile(identifier as Kaid)\n  const json = await response.json()\n\n  assertDataResponse(json)\n  if (!json.data.user) throw new Error('User not found')\n\n  return json.data.user.username\n}\n\n/**\n * Resolve a program ID from a program URL or key\n *\n * @param identifier Program ID, URL, or key\n *\n * @returns Program ID as a number\n */\nexport function resolveProgramID(\n  identifier: ProgramID | ProgramURL | ProgramKey\n): ProgramIDNumber {\n  if (typeof identifier === 'number') {\n    if (!isProgramID(identifier)) throw new Error('Invalid program ID')\n    return identifier\n  } else if (isProgramURL(identifier)) {\n    const str = identifier.match(ProgramURLRegex)![1]\n    if (!isProgramID(str)) throw new Error('Invalid program URL')\n    return parseInt(str, 10)\n  } else if (isProgramKey(identifier)) {\n    identifier = programKeyToID(identifier)\n    if (!isProgramID(identifier)) throw new Error('Invalid program key')\n    return identifier\n  } else if (typeof identifier === 'string') {\n    if (!isProgramID(identifier)) throw new Error('Invalid program ID')\n    return parseInt(identifier, 10)\n  }\n  throw new Error('Invalid program identifier')\n}\n\n/**\n * Resolves a feedback key from an encrypted feedback key\n *\n * @param identifier Feedback key or encrypted feedback key\n */\nexport async function resolveFeedbackKey(\n  identifier: FeedbackKey | EncryptedFeedbackKey\n): Promise<FeedbackKey> {\n  if (isFeedbackKey(identifier)) return identifier\n  if (!isEncryptedFeedbackKey(identifier))\n    throw new Error('Invalid encrypted message key')\n\n  const response = await QAExpandKeyInfo(identifier)\n  const json = await response.json()\n\n  assertDataResponse(json)\n  if (!json.data.qaExpandKeyInfo) throw new Error('Message key not found')\n\n  return json.data.qaExpandKeyInfo.unencryptedKey\n}\n", "import Client from './Client'\nimport Question from './lib/messages/Question'\nimport TipsAndThanks from './lib/messages/TipsAndThanks'\nimport Wrapper from './lib/Wrapper'\nimport { FeedbackSort, ProgramEditorType } from './types/enums'\nimport { ProgramSchema, UserSchema } from './types/schema'\nimport {\n  ProgramID,\n  ProgramIDNumber,\n  ProgramKey,\n  ProgramURL,\n} from './types/strings'\nimport User from './User'\nimport {\n  isProgramKey,\n  ProgramImagePathRegex,\n  ProgramURLRegex,\n} from './utils/regexes'\nimport { resolveProgramID } from './utils/resolvers'\nimport { RecursivePartial } from './utils/types'\n\n/**\n * @rawEquivalent {@link types/enums!ProgramEditorType}\n */\nexport enum ProgramType {\n  ProcessingJS = 'pjs',\n  HTML = 'webpage',\n  SQL = 'ace_sql',\n  Other = '',\n}\n\nexport interface IProgram {\n  readonly id?: ProgramIDNumber\n  readonly title?: string\n  readonly author?: User\n  readonly created?: Date\n  readonly updated?: Date | null\n  readonly width?: number\n  readonly height?: number\n  readonly votes?: number\n  readonly spinOffCount?: number\n  readonly hidden?: boolean\n  readonly code?: string\n  readonly type?: ProgramType\n\n  readonly origin?: Program | null\n  readonly key?: ProgramKey\n  readonly thumbnailID?: number\n  readonly description?: string | null\n  readonly deleted?: boolean\n  readonly category?: string\n\n  readonly selfFlagged?: boolean\n  readonly selfVoted?: boolean\n\n  readonly tipsAndThanks?: TipsAndThanks[]\n  readonly questions?: Question[]\n  readonly helpRequests?: Question[]\n}\n\nexport default class Program\n  extends Wrapper<ProgramSchema<UserSchema>, IProgram>\n  implements IProgram\n{\n  /**\n   * Aliases for the program types.\n   *\n   * @rawEquivalent {@link types/schema!ProgramRevisionSchema.editorType}\n   */\n  static readonly Type = ProgramType\n\n  /**\n   * The ID of the program.\n   */\n  readonly id?: number\n  /**\n   * The title of the program.\n   */\n  readonly title?: string\n  /**\n   * The author of the program.\n   */\n  readonly author?: User\n  /**\n   * The date the program was created.\n   */\n  readonly created?: Date\n  /**\n   * The date the program was last updated.\n   *\n   * @description\n   * Set to `null` if the program has never been updated.\n   */\n  readonly updated?: Date | null\n  /**\n   * The height of the program in pixels.\n   *\n   * @description\n   * Constrained between 400 and 600. May be any value in between.\n   */\n  readonly width?: number\n  /**\n   * The height of the program in pixels.\n   *\n   * @description\n   * Constrained between 400 and 600. May be any value in between.\n   */\n  readonly height?: number\n  /**\n   * The number of votes the program has received.\n   *\n   * @description\n   * Note that a program has 1 vote on creation.\n   */\n  readonly votes?: number\n  /**\n   * The number of spin-offs the program has.\n   */\n  readonly spinOffCount?: number\n  /**\n   * The code of the program.\n   */\n  readonly code?: string\n  /**\n   * Whether the program is hidden from the hotlist.\n   */\n  readonly hidden?: boolean\n  /**\n   * The type of program.\n   */\n  readonly type?: ProgramType\n\n  /**\n   * The original program that this program is a spin-off of.\n   */\n  readonly origin?: Program | null\n  readonly key?: ProgramKey\n  /**\n   * The ID of the latest thumbnail image of the program.\n   *\n   * @description\n   * Previous thumbnails are not guaranteed to be available.\n   */\n  readonly thumbnailID?: number\n  /**\n   * The description of the program. Set to `null` if the description is empty string.\n   */\n  readonly description?: string | null\n  /**\n   * Whether the program has been deleted.\n   */\n  readonly deleted?: boolean\n\n  /**\n   * Whether the program has been flagged by the client's authenticated user.\n   *\n   * @see {@link client}\n   */\n  readonly selfFlagged?: boolean\n  /**\n   * Whether the program has been voted by the client's authenticated user.\n   *\n   * @see {@link client}\n   */\n  readonly selfVoted?: boolean\n\n  readonly tipsAndThanks?: TipsAndThanks[]\n  readonly questions?: Question[]\n  readonly helpRequests?: Question[]\n\n  get spinoff() {\n    return typeof this.origin !== 'undefined' ? !!this.origin : null\n  }\n\n  /**\n   * Number of lines of code in the program.\n   */\n  get lines() {\n    if (this.code) return this.code.split('\\n').length\n    return null\n  }\n\n  /**\n   * URL of the program.\n   */\n  get url() {\n    if (this.rawData?.url)\n      return `https://www.khanacademy.org${this.rawData.url}`\n    if (this.id)\n      return `https://www.khanacademy.org/computer-programming/-/${this.id}`\n    return null\n  }\n\n  /**\n   * Short URL of the program.\n   */\n  get shortUrl() {\n    if (this.id) return `https://khanacademy.org/cs/-/${this.id}`\n    return null\n  }\n\n  /**\n   * Thumbnail image URL of the program.\n   *\n   * @description\n   * To get the latest thumbnail image, use 'latest' as the thumbnail ID instead.\n   */\n  get thumbnailUrl() {\n    if (this.rawData?.imagePath)\n      return `https://www.khanacademy.org${this.rawData.imagePath}`\n    if (this.thumbnailID && this.url)\n      return `${this.url}/${this.thumbnailID}.png`\n    return null\n  }\n\n  static fromSchema(schema: RecursivePartial<ProgramSchema<UserSchema>>) {\n    const program = new Program()\n    program.copyFromSchema(schema)\n    program.rawData = schema\n\n    return program\n  }\n\n  static fromIdentifier(identifier: ProgramID | ProgramURL | ProgramKey) {\n    const id = resolveProgramID(identifier)\n    const program = new Program({\n      id,\n      key:\n        typeof identifier === 'string' && isProgramKey(identifier)\n          ? identifier\n          : undefined,\n    })\n    return program\n  }\n\n  #resolveIdentifier() {\n    if (this.id) return this.id\n    if (this.key) return this.key\n\n    throw new Error('Program has no identifier')\n  }\n\n  transformSchema(schema: RecursivePartial<ProgramSchema<UserSchema>>) {\n    return {\n      id: schema.id ? parseInt(schema.id, 10) : undefined,\n      title: schema.translatedTitle,\n      author:\n        schema.authorKaid || schema.authorNickname || schema.creatorProfile\n          ? User.fromSchema({\n              kaid: schema.authorKaid,\n              nickname: schema.authorNickname,\n              isChild: schema.byChild ?? undefined,\n              ...schema.creatorProfile,\n            })\n          : undefined,\n      created: (() => {\n        if (!schema.created) return undefined\n        // Some very old programs' updated date is before their created date (e.g. 981866281)\n        if (schema.revision?.created) {\n          return new Date(\n            Math.min(\n              new Date(schema.created).valueOf(),\n              new Date(schema.revision.created).valueOf()\n            )\n          )\n        }\n        return new Date(schema.created)\n      })(),\n      updated: (() => {\n        if (!schema.revision?.created) return undefined\n        if (schema.created && schema.revision.created === schema.created)\n          return null\n        return new Date(schema.revision.created)\n      })(),\n      width: schema.width,\n      height: schema.height,\n      votes: schema.sumVotesIncremented,\n      spinOffCount: schema.spinoffCount ?? schema.displayableSpinoffCount,\n      code: schema.revision?.code,\n      hidden: schema.hideFromHotlist,\n      type: (() => {\n        switch (schema.revision?.editorType) {\n          case ProgramEditorType.pjs:\n            return Program.Type.ProcessingJS\n          case ProgramEditorType.webpage:\n            return Program.Type.HTML\n          case ProgramEditorType.ace_sql:\n            return Program.Type.SQL\n          default:\n            return Program.Type.Other\n        }\n      })(),\n\n      origin: (() => {\n        if (!schema.originScratchpad) return schema.originScratchpad\n        const id = (\n          'https://khanacademy.org' + schema.originScratchpad.url\n        ).match(ProgramURLRegex)?.[1]\n        if (!id) {\n          console.error(\n            `Failed to parse origin program ID from URL: ${schema.originScratchpad.url}`\n          )\n          return undefined\n        }\n        // Resist the urge to cast as `ProgramSchema`\n        return new Program({\n          id: parseInt(id, 10),\n          title: schema.originScratchpad.translatedTitle,\n          deleted: schema.originScratchpad.deleted,\n        })\n      })(),\n      key: schema.key,\n      thumbnailID:\n        schema.imagePath && ProgramImagePathRegex.test(schema.imagePath)\n          ? parseInt(schema.imagePath.match(ProgramImagePathRegex)![1], 10)\n          : undefined,\n      description:\n        typeof schema.description === 'string'\n          ? schema.description !== ''\n            ? schema.description\n            : null\n          : schema.description,\n      deleted: schema.deleted ?? undefined,\n\n      selfFlagged: schema.flaggedByUser,\n      selfVoted: schema.upVoted,\n    }\n  }\n\n  async get(client = this.client ?? new Client()) {\n    if (!this.id && !this.key) throw new Error('Program is missing ID and key')\n\n    const data = await client.getProgram(this.id ?? this.key!)\n\n    return this.copy(data)\n  }\n\n  async *getTipsAndThanks(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    for await (const messages of client.getProgramTipsAndThanks(\n      this.#resolveIdentifier(),\n      sort\n    )) {\n      if (!this.tipsAndThanks) this.copy({ tipsAndThanks: [] })\n      messages.forEach((message) => this.tipsAndThanks?.push(message))\n      yield messages\n    }\n\n    return this\n  }\n\n  async getAllTipsAndThanks(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    const messages = await client.getAllProgramTipsAndThanks(\n      this.#resolveIdentifier(),\n      sort\n    )\n\n    return this.copy({ tipsAndThanks: messages })\n  }\n\n  async *getQuestions(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    for await (const messages of client.getProgramQuestions(\n      this.#resolveIdentifier(),\n      sort\n    )) {\n      if (!this.questions) this.copy({ questions: [] })\n      messages.forEach((message) => this.questions!.push(message))\n      yield messages\n    }\n\n    return this\n  }\n\n  async getAllQuestions(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    const messages = await client.getAllProgramQuestions(\n      this.#resolveIdentifier(),\n      sort\n    )\n\n    return this.copy({ questions: messages })\n  }\n\n  async *getHelpRequests(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    for await (const messages of client.getProgramHelpRequests(\n      this.#resolveIdentifier(),\n      sort\n    )) {\n      if (!this.helpRequests) this.copy({ helpRequests: [] })\n      messages.forEach((message) => this.helpRequests!.push(message))\n      yield messages\n    }\n\n    return this\n  }\n\n  async getAllHelpRequests(\n    client = this.client ?? new Client(),\n    sort?: FeedbackSort\n  ) {\n    const messages = await client.getAllProgramHelpRequests(\n      this.#resolveIdentifier(),\n      sort\n    )\n\n    return this.copy({ helpRequests: messages })\n  }\n\n  is(program: IProgram) {\n    if (!(this.id && program.id) && !(this.key && program.key)) {\n      console.warn(\"Programs don't have any identifiers that can be compared\")\n      return false\n    }\n    return (\n      (this.id && program.id && this.id === program.id) ||\n      (this.key && program.key && this.key === program.key) ||\n      false\n    )\n  }\n}\n", "import {\n  AvatarName,\n  AvatarPath,\n  AvatarPNG,\n  AvatarSlug,\n  AvatarSVG,\n  AvatarURL,\n} from '../types/strings'\n\nexport const avatarNames = [\n  'blobby_green_style',\n  'blobby_yellow_style',\n  'blobby_blue_style',\n  'blobby_purple_style',\n  'area_52_yellow_style',\n  'area_52_blue_style',\n  'area_52_green_style',\n  'area_52_purple_style',\n  'eggleston_blue_style',\n  'eggleston_yellow_style',\n  'eggleston_green_style',\n  'eggleston_orange_style',\n  'scuttlebug_purple_style',\n  'scuttlebug_yellow_style',\n  'scuttlebug_blue_style',\n  'scuttlebug_green_style',\n  'boggle_yellow_style',\n  'boggle_blue_style',\n  'boggle_green_style',\n  'boggle_purple_style',\n  'sneak_peak_green_style',\n  'sneak_peak_yellow_style',\n  'sneak_peak_blue_style',\n  'sneak_peak_purple_style',\n  'stelly_blue_style',\n  'stelly_yellow_style',\n  'stelly_green_style',\n  'stelly_orange_style',\n  'cacteye_purple_style',\n  'cacteye_yellow_style',\n  'cacteye_blue_style',\n  'cacteye_green_style',\n  'leaf_green_style',\n  'leaf_blue_style',\n  'leaf_grey_style',\n  'leaf_red_style',\n  'leaf_orange_style',\n  'leaf_yellow_style',\n  'leafers_seed_style',\n  'leafers_seedling_style',\n  'leafers_sapling_style',\n  'leafers_tree_style',\n  'leafers_ultimate_style',\n  'piceratops_seed_style',\n  'piceratops_seedling_style',\n  'piceratops_sapling_style',\n  'piceratops_tree_style',\n  'piceratops_ultimate_style',\n  'duskpin_seed_style',\n  'duskpin_seedling_style',\n  'duskpin_sapling_style',\n  'duskpin_tree_style',\n  'duskpin_ultimate_style',\n  'primosaur_seed_style',\n  'primosaur_seedling_style',\n  'primosaur_sapling_style',\n  'primosaur_tree_style',\n  'primosaur_ultimate_style',\n  'starky_seed_style',\n  'starky_seedling_style',\n  'starky_sapling_style',\n  'starky_tree_style',\n  'starky_ultimate_style',\n  'aqualine_seed_style',\n  'aqualine_seedling_style',\n  'aqualine_sapling_style',\n  'aqualine_tree_style',\n  'aqualine_ultimate_style',\n  'spunky_sam_blue_style',\n  'spunky_sam_green_style',\n  'spunky_sam_orange_style',\n  'spunky_sam_red_style',\n  'marcimus_pink_style',\n  'marcimus_orange_style',\n  'marcimus_red_style',\n  'marcimus_purple_style',\n  'mr_pink_red_style',\n  'mr_pink_green_style',\n  'mr_pink_orange_style',\n  'female_robot_amelia_style',\n  'female_robot_ada_style',\n  'female_robot_grace_style',\n  'male_robot_johnny_style',\n  'male_robot_donald_style',\n  'male_robot_hal_style',\n  'orange_juice_squid_orange_style',\n  'purple_pi_purple_style',\n  'purple_pi_pink_style',\n  'purple_pi_teal_style',\n  'mr_pants_teal_style',\n  'mr_pants_green_style',\n  'mr_pants_orange_style',\n  'mr_pants_pink_style',\n  'mr_pants_purple_style',\n  'old_spice_man_green_style',\n  'old_spice_man_blue_style',\n  'winston_default_style',\n  'winston_baby_style',\n  'ohnoes_default_style',\n  'hopper_happy_style',\n  'hopper_jumping_style',\n  'hopper_cool_style',\n] as const\n\n// Not as simple as removing the `_style` suffix and replacing `_` with `-`\n// Why would it be? This is Khan Academy we're talking about\nexport const avatarSlugs = [\n  'blobby-green',\n  'blobby-yellow',\n  'blobby-blue',\n  'blobby-purple',\n  'area-52-yellow',\n  'area-52-blue',\n  'area-52-green',\n  'area-52-purple',\n  'eggleston-blue',\n  'eggleston-yellow',\n  'eggleston-green',\n  'eggleston-orange',\n  'scuttlebug-purple',\n  'scuttlebug-yellow',\n  'scuttlebug-blue',\n  'scuttlebug-green',\n  'boggle-yellow',\n  'boggle-blue',\n  'boggle-green',\n  'boggle-purple',\n  'sneak-peak-green',\n  'sneak-peak-yellow',\n  'sneak-peak-blue',\n  'sneak-peak-purple',\n  'stelly-blue',\n  'stelly-yellow',\n  'stelly-green',\n  'stelly-orange',\n  'cacteye-purple',\n  'cacteye-yellow',\n  'cacteye-blue',\n  'cacteye-green',\n  'leaf-green',\n  'leaf-blue',\n  'leaf-grey',\n  'leaf-red',\n  'leaf-orange',\n  'leaf-yellow',\n  'leafers-seed',\n  'leafers-seedling',\n  'leafers-sapling',\n  'leafers-tree',\n  'leafers-ultimate',\n  'piceratops-seed',\n  'piceratops-seedling',\n  'piceratops-sapling',\n  'piceratops-tree',\n  'piceratops-ultimate',\n  'duskpin-seed',\n  'duskpin-seedling',\n  'duskpin-sapling',\n  'duskpin-tree',\n  'duskpin-ultimate',\n  'primosaur-seed',\n  'primosaur-seedling',\n  'primosaur-sapling',\n  'primosaur-tree',\n  'primosaur-ultimate',\n  'starky-seed',\n  'starky-seedling',\n  'starky-sapling',\n  'starky-tree',\n  'starky-ultimate',\n  'aqualine-seed',\n  'aqualine-seedling',\n  'aqualine-sapling',\n  'aqualine-tree',\n  'aqualine-ultimate',\n  'spunky-sam',\n  'spunky-sam-green',\n  'spunky-sam-orange',\n  'spunky-sam-red',\n  'marcimus',\n  'marcimus-orange',\n  'marcimus-red',\n  'marcimus-purple',\n  'mr-pink',\n  'mr-pink-green',\n  'mr-pink-orange',\n  'robot_female_1',\n  'robot_female_2',\n  'robot_female_3',\n  'robot_male_1',\n  'robot_male_2',\n  'robot_male_3',\n  'orange-juice-squid',\n  'purple-pi',\n  'purple-pi-pink',\n  'purple-pi-teal',\n  'mr-pants',\n  'mr-pants-green',\n  'mr-pants-orange',\n  'mr-pants-pink',\n  'mr-pants-purple',\n  'old-spice-man',\n  'old-spice-man-blue',\n  'cs-winston',\n  'cs-winston-baby',\n  'cs-ohnoes',\n  'cs-hopper-happy',\n  'cs-hopper-jumping',\n  'cs-hopper-cool',\n] as const\n\nexport function avatarNameToSlug(name: AvatarName) {\n  return avatarSlugs[avatarNames.indexOf(name)]\n}\n\nexport function avatarSlugToName(slug: AvatarSlug) {\n  return avatarNames[avatarSlugs.indexOf(slug)]\n}\n\n/**\n * Generates a URL to an avatar SVG\n */\nexport function generateAvatarSVG(slug: AvatarSlug): AvatarSVG {\n  return `https://www.khanacademy.org/images/avatars/svg/${slug}.svg`\n}\n\n/**\n * Generates a URL to an avatar PNG\n */\nexport function generateAvatarPNG(slug: AvatarSlug): AvatarPNG {\n  return `https://www.khanacademy.org/images/avatars/${slug}.png`\n}\n\n/**\n * Extracts the avatar slug from a path or URL\n *\n * @param path Relative or absolute path to an avatar\n * @returns The avatar slug if the path is valid, null otherwise\n *\n * @example\n * extractAvatarSlug('/images/avatars/blobby-green.svg') // 'blobby-green'\n *\n * @example\n * extractAvatarSlug('https://www.khanacademy.org/images/avatars/svg/blobby-green.svg') // 'blobby-green'\n *\n * @example\n * extractAvatarSlug('https://www.khanacademy.org/images/avatars/blobby-green.png') // 'blobby-green'\n */\nexport function extractAvatarSlug(\n  path: AvatarPath | AvatarURL\n): AvatarSlug | null {\n  return (\n    (path.match(\n      /^(?:https:\\/\\/www\\.khanacademy\\.org)?\\/images\\/avatars(?:\\/svg)?\\/(.*)\\.(?:(?:svg)|(?:png))$/\n    )?.[1] as AvatarSlug | undefined) ?? null\n  )\n}\n\nexport function convertAvatarSVGToPNG(url: AvatarSVG): AvatarPNG | null {\n  const slug = extractAvatarSlug(url)\n  if (!slug) return null\n  return generateAvatarPNG(slug)\n}\n\nexport function convertAvatarPNGToSVG(url: AvatarPNG): AvatarSVG | null {\n  const slug = extractAvatarSlug(url)\n  if (!slug) return null\n  return generateAvatarSVG(slug)\n}\n", "/**\n * Remove cookie attributes from a cookie string (`Path`, `Expires`, `Max-Age`, `HttpOnly`, `Secure`, `SameSite`)\n * @param cookies\n */\nexport function stripCookies(cookies: string): string {\n  return cookies\n    .replace(/[a-zA-Z]+, \\d\\d [A-Za-z0-9]+ \\d{4} \\d\\d:\\d\\d:\\d\\d [a-zA-Z]+/g, '')\n    .replace(/; (Path|Expires|Max-Age|HttpOnly|Secure|SameSite)[^;,]*/g, '')\n    .replace(/,/g, ';')\n}\n", "import Wrapper from '../Wrapper'\nimport Program from '../../Program'\nimport { FeedbackSchemaBase } from '../../types/schema'\nimport User from '../../User'\nimport { RecursivePartial } from '../../utils/types'\nimport { FeedbackFocusKind } from '../../types/enums'\nimport { EncryptedFeedbackKey, FeedbackKey } from '../../types/strings'\nimport { ProgramIDRegexMatch } from '../../utils/regexes'\n\nexport interface IBaseMessage {\n  author?: User\n  byVideoAuthor?: boolean\n  created?: Date\n  deleted?: boolean\n  encryptedKey?: string\n  key?: string\n  program?: Program\n  score?: number\n  selfFlagged?: boolean\n  text?: string\n  verified?: boolean\n}\n\nexport default abstract class BaseMessage\n  extends Wrapper<FeedbackSchemaBase, IBaseMessage>\n  implements IBaseMessage\n{\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.content}\n   */\n  readonly text?: string\n  readonly author?: User\n  readonly program?: Program\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.date}\n   */\n  readonly created?: Date\n\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.expandKey}\n   */\n  readonly key?: FeedbackKey\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.key}\n   */\n  readonly encryptedKey?: EncryptedFeedbackKey\n\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.appearsAsDeleted}\n   */\n  readonly deleted?: boolean\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.definitelyNotSpam}\n   */\n  readonly verified?: boolean\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.lowQualityScore}\n   */\n  readonly score?: number\n\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.fromVideoAuthor}\n   */\n  readonly byVideoAuthor?: boolean\n\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.flaggedByUser}\n   */\n  readonly selfFlagged?: boolean\n\n  /**\n   * Checks if the message was written by the client user\n   */\n  get bySelf() {\n    return this.client?.user ? this.byUser(this.client.user) : false\n  }\n\n  transformSchema(schema: RecursivePartial<FeedbackSchemaBase>): IBaseMessage {\n    return {\n      text: schema.content,\n      author: schema.author && User.fromSchema(schema.author),\n      program: (() => {\n        if (schema.focus?.kind === FeedbackFocusKind.Scratchpad)\n          return new Program({\n            id:\n              typeof schema.focus.id === 'string'\n                ? parseInt(schema.focus.id, 10)\n                : undefined,\n            title: schema.focus.translatedTitle,\n          })\n        if (schema.focusUrl) {\n          const matches = schema.focusUrl.match(ProgramIDRegexMatch)\n          if (!matches || matches.length < 1) return\n          return new Program({\n            id: parseInt(matches[1], 10),\n          })\n        }\n      })(),\n      created: schema.date ? new Date(schema.date) : undefined,\n      key: schema.expandKey,\n      encryptedKey: schema.key,\n      deleted: schema.appearsAsDeleted,\n      verified: schema.definitelyNotSpam,\n      score: schema.lowQualityScore,\n      byVideoAuthor: schema.fromVideoAuthor,\n      selfFlagged: schema.flaggedByUser,\n    }\n  }\n\n  /**\n   * Checks if the message was written by the given user\n   */\n  byUser(user: User) {\n    return this.author ? this.author.is(user) : false\n  }\n\n  /**\n   * Checks if the message is the same as the given message\n   */\n  is(message: BaseMessage | IBaseMessage): boolean {\n    if (\n      !(this.key && message.key) &&\n      !(this.encryptedKey && message.encryptedKey)\n    ) {\n      console.warn(\"Messages don't have any identifiers that can be compared\")\n      return false\n    }\n    return (\n      (this.key && message.key && this.key === message.key) ||\n      (this.encryptedKey &&\n        message.encryptedKey &&\n        this.encryptedKey === message.encryptedKey) ||\n      false\n    )\n  }\n}\n", "import Client from '../../Client'\nimport { FeedbackType } from '../../types/enums'\nimport {\n  AnswerFeedbackSchema,\n  BasicFeedbackSchema,\n  QuestionFeedbackSchema,\n} from '../../types/schema'\nimport { EncryptedFeedbackKey, FeedbackKey } from '../../types/strings'\nimport { isEncryptedFeedbackKey, isFeedbackKey } from '../../utils/regexes'\nimport { RecursivePartial } from '../../utils/types'\nimport BaseMessage, { IBaseMessage } from './BaseMessage'\nimport Reply from './Reply'\n\n/**\n * @rawEquivalent {@link types/enums!FeedbackType}\n */\nexport enum MessageType {\n  TipsAndThanks = FeedbackType.COMMENT,\n  Question = FeedbackType.QUESTION,\n  HelpRequest = FeedbackType.PROJECT_HELP_QUESTION,\n}\n\nexport interface IMessage extends IBaseMessage {\n  replies?: Reply[]\n  replyCount?: number\n  selfDownvoted?: boolean\n  selfUpvoted?: boolean\n  votes?: number\n}\n\nexport default class Message extends BaseMessage implements IMessage {\n  /**\n   * Aliases for the message types.\n   */\n  static readonly Type = MessageType\n\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.sumVotesIncremented}\n   */\n  readonly votes?: number\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.upVoted}\n   */\n  readonly selfUpvoted?: boolean\n  /**\n   * @rawEquivalent {@link types/schema!FeedbackSchemaBase.downVoted}\n   */\n  readonly selfDownvoted?: boolean\n  readonly replyCount?: number\n  readonly replies?: Reply[]\n\n  /**\n   * @returns `1` if the message was upvoted by the user, `-1` if it was downvoted,\n   * and `0` if it was not voted on. `null` if the user is not logged in.\n   *\n   * @see {@link lib/messages/Message!Message.selfUpvoted}\n   * @see {@link lib/messages/Message!Message.selfDownvoted}\n   */\n  get selfVoted() {\n    if (this.client?.authenticated === false) return null\n    return this.selfUpvoted ? 1 : this.selfDownvoted ? -1 : 0\n  }\n\n  static fromSchema(\n    schema: RecursivePartial<\n      BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n    >\n  ) {\n    const message = new Message()\n    message.copyFromSchema(schema)\n    message.rawData = schema\n    return message\n  }\n\n  static fromIdentifier(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const message = new Message({\n      key: isFeedbackKey(identifier) ? identifier : undefined,\n      encryptedKey: isEncryptedFeedbackKey(identifier) ? identifier : undefined,\n    })\n\n    return message\n  }\n\n  transformSchema(\n    schema: RecursivePartial<\n      BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n    >\n  ): IMessage {\n    return {\n      ...super.transformSchema(schema),\n      votes: schema.sumVotesIncremented,\n      replyCount: schema.replyCount,\n      selfUpvoted: schema.upVoted,\n      selfDownvoted: schema.downVoted,\n    }\n  }\n\n  copy(message: IMessage) {\n    return super.copy(message)\n  }\n\n  async get(client = this.client ?? new Client()) {\n    if (!this.key && !this.encryptedKey)\n      throw new Error('Message does not have a key or encrypted key')\n\n    const comment = await client.getMessage(this.key ?? this.encryptedKey!)\n\n    return this.copy(comment)\n  }\n\n  async getAllReplies(client = this.client ?? new Client()) {\n    if (!this.key && !this.encryptedKey)\n      throw new Error('Message does not have a key or encrypted key')\n\n    const replies = await client.getAllMessageReplies(\n      this.key ?? this.encryptedKey!\n    )\n\n    return this.copy({ replies })\n  }\n}\n", "import {\n  AnswerFeedbackSchema,\n  BasicFeedbackSchema,\n  QuestionFeedbackSchema,\n} from '../../types/schema'\nimport { FeedbackKey, EncryptedFeedbackKey } from '../../types/strings'\nimport { isEncryptedFeedbackKey, isFeedbackKey } from '../../utils/regexes'\nimport { RecursivePartial } from '../../utils/types'\nimport Message, { IMessage } from './Message'\nimport Question from './Question'\n\nexport interface IAnswer extends IMessage {\n  question?: Question\n}\n\nexport default class Answer extends Message implements IAnswer {\n  readonly question?: Question\n\n  static fromSchema(schema: RecursivePartial<AnswerFeedbackSchema>) {\n    const answer = new Answer()\n    answer.copyFromSchema(schema)\n    answer.rawData = schema\n    return answer\n  }\n\n  static fromIdentifier(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const answer = new Answer({\n      key: isFeedbackKey(identifier) ? identifier : undefined,\n      encryptedKey: isEncryptedFeedbackKey(identifier) ? identifier : undefined,\n    })\n\n    return answer\n  }\n\n  transformSchema(schema: RecursivePartial<AnswerFeedbackSchema>): IAnswer {\n    return {\n      ...super.transformSchema(schema as RecursivePartial<BasicFeedbackSchema>),\n      question: schema.question\n        ? Question.fromSchema(\n            // If only TypeScript had built-in support for recursive types...\n            schema.question as RecursivePartial<QuestionFeedbackSchema>\n          )\n        : undefined,\n    }\n  }\n\n  copy(answer: IAnswer) {\n    return super.copy(answer)\n  }\n}\n", "import Message, { IMessage } from './Message'\nimport Answer from './Answer'\nimport { BasicFeedbackSchema, QuestionFeedbackSchema } from '../../types/schema'\nimport { RecursivePartial } from '../../utils/types'\nimport { FeedbackKey, EncryptedFeedbackKey } from '../../types/strings'\nimport { isEncryptedFeedbackKey, isFeedbackKey } from '../../utils/regexes'\n\nexport interface IQuestion extends IMessage {\n  answers?: Answer[]\n  answerCount?: number\n  old?: boolean\n}\n\n/**\n * @remarks\n * Note that Help Requests are a type of Question.\n *\n * @rawEquivalent {@link types/schema!QuestionFeedbackSchema}\n */\nexport default class Question extends Message implements IQuestion {\n  readonly answerCount?: number\n  readonly answers?: Answer[]\n  /**\n   * @rawEquivalent {@link types/schema!QuestionFeedbackSchema.isOld}\n   */\n  readonly old?: boolean\n\n  static fromSchema(schema: RecursivePartial<QuestionFeedbackSchema>) {\n    const question = new Question()\n    question.copyFromSchema(schema)\n    question.rawData = schema\n    return question\n  }\n\n  static fromIdentifier(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const question = new Question({\n      key: isFeedbackKey(identifier) ? identifier : undefined,\n      encryptedKey: isEncryptedFeedbackKey(identifier) ? identifier : undefined,\n    })\n\n    return question\n  }\n\n  transformSchema(schema: RecursivePartial<QuestionFeedbackSchema>): IQuestion {\n    return {\n      ...super.transformSchema(schema as RecursivePartial<BasicFeedbackSchema>),\n      answerCount: schema.answerCount,\n      old: schema.isOld,\n      answers: (() => {\n        if (!schema.answers) return undefined\n        const answers = schema.answers.map((answer) =>\n          Answer.fromSchema(answer)\n        )\n        answers.forEach((answer) => answer.copy({ question: this }))\n        return answers\n      })(),\n    }\n  }\n\n  copy(question: IQuestion) {\n    return super.copy(question)\n  }\n}\n", "import Client from '../../Client'\nimport { BasicFeedbackSchema } from '../../types/schema'\nimport { isEncryptedFeedbackKey, isFeedbackKey } from '../../utils/regexes'\nimport { RecursivePartial } from '../../utils/types'\nimport Message from './Message'\nimport BaseMessage, { IBaseMessage } from './BaseMessage'\nimport { FeedbackKey, EncryptedFeedbackKey } from '../../types/strings'\n\nexport interface IReply extends IBaseMessage {\n  message?: Message\n}\n\nexport default class Reply extends BaseMessage implements IReply {\n  readonly message?: Message\n\n  static fromSchema(schema: RecursivePartial<BasicFeedbackSchema>) {\n    const reply = new Reply()\n    reply.copyFromSchema(schema)\n    reply.rawData = schema\n    return reply\n  }\n\n  static fromIdentifier(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const reply = new Reply({\n      key: isFeedbackKey(identifier) ? identifier : undefined,\n      encryptedKey: isEncryptedFeedbackKey(identifier) ? identifier : undefined,\n    })\n\n    return reply\n  }\n\n  transformSchema(schema: RecursivePartial<BasicFeedbackSchema>): IReply {\n    return {\n      ...super.transformSchema(schema),\n      message: (() => {\n        if (typeof schema.replyExpandKeys === 'undefined') return\n        if (\n          typeof schema.replyExpandKeys === 'string' &&\n          isFeedbackKey(schema.replyExpandKeys)\n        )\n          return new Message({ key: schema.replyExpandKeys })\n        if (Array.isArray(schema.replyExpandKeys))\n          return new Message({ key: schema.replyExpandKeys[0] })\n      })(),\n    }\n  }\n\n  copy(reply: IReply) {\n    return super.copy(reply)\n  }\n\n  /**\n   * Updates data from a schema into the instance\n   *\n   * @param schema The schema to copy from\n   * @returns The class instance\n   */\n  copyFromSchema(schema: RecursivePartial<BasicFeedbackSchema>) {\n    return super.copyFromSchema(schema)\n  }\n\n  async get(client = this.client ?? new Client()) {\n    if (!this.key && !this.encryptedKey)\n      throw new Error('Message does not have a key or encrypted key')\n\n    const comment = await client.getMessage(this.key ?? this.encryptedKey!)\n\n    return this.copy(comment)\n  }\n}\n", "import { BasicFeedbackSchema } from '../../types/schema'\nimport { EncryptedFeedbackKey, FeedbackKey } from '../../types/strings'\nimport { isEncryptedFeedbackKey, isFeedbackKey } from '../../utils/regexes'\nimport { RecursivePartial } from '../../utils/types'\nimport Message, { IMessage } from './Message'\n\nexport type ITipsAndThanks = IMessage\n\nexport default class TipsAndThanks extends Message {\n  static fromSchema(schema: RecursivePartial<BasicFeedbackSchema>) {\n    const message = new TipsAndThanks()\n    message.copyFromSchema(schema)\n    message.rawData = schema\n    return message\n  }\n\n  static fromIdentifier(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const message = new TipsAndThanks({\n      key: isFeedbackKey(identifier) ? identifier : undefined,\n      encryptedKey: isEncryptedFeedbackKey(identifier) ? identifier : undefined,\n    })\n\n    return message\n  }\n\n  transformSchema(\n    schema: RecursivePartial<BasicFeedbackSchema>\n  ): ITipsAndThanks {\n    return {\n      ...super.transformSchema(schema),\n      votes: schema.sumVotesIncremented,\n      replyCount: schema.replyCount,\n      selfUpvoted: schema.upVoted,\n      selfDownvoted: schema.downVoted,\n    }\n  }\n\n  copy(tipsAndThanks: ITipsAndThanks) {\n    return super.copy(tipsAndThanks)\n  }\n}\n", "import { MessageType } from '../lib/messages/Message'\nimport Question from '../lib/messages/Question'\nimport TipsAndThanks from '../lib/messages/TipsAndThanks'\nimport { FeedbackType } from '../types/enums'\nimport {\n  BasicFeedbackSchema,\n  QuestionFeedbackSchema,\n  AnswerFeedbackSchema,\n} from '../types/schema'\n\nexport function isTipsAndThanksSchema(\n  schema: BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n): schema is BasicFeedbackSchema {\n  return schema.feedbackType === FeedbackType.COMMENT\n}\n\nexport function isReplySchema(\n  schema: BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n): schema is BasicFeedbackSchema {\n  return schema.feedbackType === FeedbackType.REPLY\n}\n\nexport function isQuestionSchema(\n  schema: BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n): schema is QuestionFeedbackSchema {\n  return schema.feedbackType === FeedbackType.QUESTION\n}\n\nexport function isAnswerSchema(\n  schema: BasicFeedbackSchema | QuestionFeedbackSchema | AnswerFeedbackSchema\n): schema is AnswerFeedbackSchema {\n  return schema.feedbackType === FeedbackType.ANSWER\n}\n\nexport const TypeToClass = {\n  [MessageType.TipsAndThanks]: TipsAndThanks,\n  [MessageType.Question]: Question,\n  [MessageType.HelpRequest]: Question,\n} as const\n", "import loginWithPasswordMutation, {\n  LoginWithPasswordMutation,\n} from './mutations/loginWithPasswordMutation'\nimport Program from './Program'\nimport avatarDataForProfile from './queries/avatarDataForProfile'\nimport getFullUserProfile from './queries/getFullUserProfile'\nimport programQuery from './queries/programQuery'\nimport { assertDataResponse } from './types/responses'\nimport {\n  Kaid,\n  EncryptedFeedbackKey,\n  FeedbackKey,\n  ProgramKey,\n  ProgramID,\n  ProgramURL,\n  Email,\n} from './types/strings'\nimport User from './User'\nimport {\n  extractAvatarSlug,\n  generateAvatarPNG,\n  generateAvatarSVG,\n} from './utils/avatars'\nimport { stripCookies } from './utils/cookies'\nimport { truncate } from './utils/format'\nimport { isKaid, isFeedbackKey, isEmail } from './utils/regexes'\nimport { PLACEHOLDER_PROGRAM_ID } from './lib/constants'\nimport feedbackQuery from './queries/feedbackQuery'\nimport {\n  FeedbackFocusKind,\n  FeedbackSort,\n  FeedbackType,\n  ListProgramSortOrder,\n} from './types/enums'\nimport Answer from './lib/messages/Answer'\nimport Question from './lib/messages/Question'\nimport Reply from './lib/messages/Reply'\nimport {\n  isTipsAndThanksSchema,\n  isQuestionSchema,\n  TypeToClass,\n} from './utils/messages'\nimport TipsAndThanks from './lib/messages/TipsAndThanks'\nimport getFeedbackReplies from './queries/getFeedbackReplies'\nimport { TypedResponse } from './utils/fetch'\nimport {\n  resolveFeedbackKey,\n  resolveKaid,\n  resolveProgramID,\n  resolveUsername,\n} from './utils/resolvers'\nimport { BasicFeedbackSchema, QuestionFeedbackSchema } from './types/schema'\nimport Message from './lib/messages/Message'\nimport { RecursivePartial } from './utils/types'\nimport projectsAuthoredByUser from './queries/projectsAuthoredByUser'\nimport getProfileWidgets from './queries/getProfileWidgets'\nimport { UserStatistics } from './types/user-statistics'\n\nexport default class Client {\n  #identifier?: string\n  #password?: string\n  #cookies?: string\n\n  #cachedKaids = new Map<string | Email, Kaid>()\n  #cachedUsernames = new Map<Kaid | string, string>()\n  #cachedFeedbackKeys = new Map<EncryptedFeedbackKey, FeedbackKey>()\n\n  authenticated = false\n  kaid: Kaid | null = null\n  user?: User\n\n  static async #resolveJsonReponse<T>(response: TypedResponse<T>) {\n    try {\n      return await response.json()\n    } catch (err) {\n      const message =\n        err instanceof Error\n          ? err.message\n          : typeof err === 'string'\n          ? err\n          : 'Unknown error'\n      throw new Error(`Failed to parse response JSON: ${message}`)\n    }\n  }\n\n  /**\n   * Creates a new Client instance\n   *\n   * @example\n   * const client = new Client()\n   */\n  constructor() {\n    return this\n  }\n\n  /**\n   * Resolves a username or email to a KAID and caches the result\n   *\n   * @remarks\n   * If the identifier is cached, it will be returned immediately. Otherwise a\n   * `getUserByUsernameOrEmail` request will be made to resolve the identifier\n   *\n   * @see {@link utils/resolvers!resolveKaid}\n   *\n   * @example\n   * const getKaid = async () => await client.resolveCachedKaid('bhavjitChauhan')\n   * console.log(await getKaid()) // Makes a request\n   * console.log(await getKaid()) // Returns cached result\n   */\n  async resolveCachedKaid(identifier: Kaid | string | Email): Promise<Kaid> {\n    if (isKaid(identifier)) return identifier\n\n    if (this.#cachedKaids.has(identifier))\n      return this.#cachedKaids.get(identifier)!\n\n    const kaid = await resolveKaid(identifier)\n\n    this.#cachedKaids.set(identifier, kaid)\n\n    return kaid\n  }\n\n  /**\n   * Resolves a KAID to a username and caches the result\n   *\n   * @remarks\n   * If the identifier is cached, it will be returned immediately. Otherwise a\n   * `getUserHoverCardProfile` request will be made to resolve the identifier\n   *\n   * @see {@link utils/resolvers!resolveUsername}\n   *\n   * @example\n   * const getUsername = async () => await client.resolveCachedUsername('kaid_376749826184384230772276')\n   * console.log(await getUsername()) // Makes a request\n   * console.log(await getUsername()) // Returns cached result\n   */\n  async resolveCachedUsername(identifier: Kaid | string) {\n    if (!isKaid(identifier) && !isEmail(identifier)) return identifier\n\n    if (this.#cachedUsernames.has(identifier))\n      return this.#cachedUsernames.get(identifier)!\n\n    const username = await resolveUsername(identifier)\n\n    this.#cachedUsernames.set(identifier, username)\n\n    return username\n  }\n\n  /**\n   * Resolved an encrypted message key to an unencrypted message key and caches\n   * the result\n   *\n   * @remarks\n   * If the identifier is cached, it will be returned immediately. Otherwise a\n   * `QAExpandKeyInfo` request will be made to resolve the identifier\n   *\n   * @see {@link utils/resolvers!resolveFeedbackKey}\n   */\n  async resolveCachedFeedbackKey(\n    identifier: FeedbackKey | EncryptedFeedbackKey\n  ) {\n    if (isFeedbackKey(identifier)) return identifier\n\n    if (this.#cachedFeedbackKeys.has(identifier))\n      return this.#cachedFeedbackKeys.get(identifier)!\n\n    const feedbackKey = await resolveFeedbackKey(identifier)\n\n    this.#cachedFeedbackKeys.set(identifier, feedbackKey)\n\n    return feedbackKey\n  }\n\n  /**\n   * Gets the KAAS cookie from the current session\n   *\n   * @remarks\n   * The KAAS cookie is used by Khan Academy to authenticate requests.\n   *\n   * @returns KAAS cookie or null if not authenticated\n   */\n  get kaas() {\n    if (!this.authenticated || !this.#cookies) return null\n\n    return this.#cookies.match(/KAAS=([^;]+)/)?.[1] ?? null\n  }\n\n  /**\n   * Logs in to Khan Academy and stores the KAAS cookie\n   *\n   * @param identifier KAID, username or email\n   * @param password\n   */\n  async login(identifier?: Kaid | string | Email, password?: string) {\n    if (identifier) {\n      if (isKaid(identifier))\n        identifier = await this.resolveCachedUsername(identifier)\n      this.#identifier = identifier\n    }\n    if (password) this.#password = password\n\n    if (!this.#identifier || !this.#password) {\n      if (!this.#identifier) throw new Error('Missing username or email')\n      if (!this.#password) throw new Error('Missing password')\n      throw new Error('Missing username/email and password')\n    }\n\n    const response = await loginWithPasswordMutation(\n      {\n        identifier: this.#identifier,\n        password: this.#password,\n      },\n      { credentials: 'include' }\n    )\n\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.loginWithPassword) throw new Error('Malformed response')\n\n    if (json.data.loginWithPassword.error)\n      switch (json.data.loginWithPassword.error.code) {\n        case LoginWithPasswordMutation.ErrorCode.INVALID_CREDENTIALS:\n          throw new Error(\n            'Invalid Credentials error: Check your username/email and password'\n          )\n        case LoginWithPasswordMutation.ErrorCode.TOO_MANY_ATTEMPTS:\n          throw new Error(\n            'Too Many Attempts error: Rate-limited by Khan Academy'\n          )\n        default: {\n          throw new Error(\n            'Unknown error code: ' +\n              (json.data.loginWithPassword.error.code as unknown as string)\n          )\n        }\n      }\n\n    const cookies = response.headers.get('set-cookie')\n    if (!cookies)\n      throw new Error(\n        \"No cookies returned: Something went wrong on Khan Academy's end\"\n      )\n    this.#cookies = stripCookies(cookies)\n\n    // Can this be a getter for `this.#cookies` instead?\n    this.authenticated = true\n\n    this.kaid =\n      typeof json.data.loginWithPassword.user?.kaid === 'string' &&\n      isKaid(json.data.loginWithPassword.user.kaid)\n        ? json.data.loginWithPassword.user.kaid\n        : null\n    if (this.kaid === null)\n      console.warn(\n        `User ${\n          identifier ?? this.kaas ?? 'unknown'\n        } does not have a valid KAID`\n      )\n\n    return json.data.loginWithPassword\n  }\n\n  /**\n   * @param identifier KAID, username or email\n   */\n  async getUser(identifier?: Kaid | string | Email) {\n    if (!identifier && !this.authenticated)\n      throw new Error(\n        'Not authenticated: You need to login or provide an indentifier'\n      )\n\n    let email: string | null = null\n    if (identifier && isEmail(identifier)) {\n      email = identifier\n      identifier = await this.resolveCachedKaid(identifier)\n    }\n\n    const response = await getFullUserProfile(\n      identifier,\n      !identifier\n        ? { credentials: 'include', headers: { cookie: this.#cookies! } }\n        : undefined\n    )\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.user) throw new Error('User not found')\n\n    const user = User.fromSchema(json.data.user)\n    user.client = this\n    // Why not?\n    if (!user.email && email && isEmail(email)) user.copy({ email })\n    if (user.self) this.user = user\n\n    if (user.kaid) {\n      if (user.username && !this.#cachedKaids.has(user.username))\n        this.#cachedKaids.set(user.username, user.kaid)\n      if (user.email && !this.#cachedKaids.has(user.email))\n        this.#cachedKaids.set(user.email, user.kaid)\n    }\n\n    return user\n  }\n\n  // @TODO Should probably be renamed to `getUserAvatar`\n  async getAvatar(\n    identifier: string | undefined = this.kaid ?? this.#identifier,\n    type: 'svg' | 'png' = 'svg'\n  ) {\n    if (!identifier) throw new Error('No identifier provided')\n\n    if (!isKaid(identifier))\n      identifier = await this.resolveCachedKaid(identifier)\n\n    // Why do I have to cast this to `Kaid`? It should already be `Kaid`...\n    const response = await avatarDataForProfile(identifier as Kaid)\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.user) throw new Error('User not found')\n\n    const slug = extractAvatarSlug(json.data.user.avatar.imageSrc)\n    if (!slug) throw new Error('User has no avatar')\n\n    return type === 'svg' ? generateAvatarSVG(slug) : generateAvatarPNG(slug)\n  }\n\n  async getUserStatistics(\n    identifier: Kaid | string | Email | undefined = this.kaid ??\n      this.#identifier\n  ) {\n    if (!identifier) throw new Error('No identifier provided')\n\n    if (!isKaid(identifier))\n      identifier = await this.resolveCachedKaid(identifier)\n\n    const response = await getProfileWidgets(identifier as Kaid)\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.user) throw new Error('User not found')\n\n    return {\n      votes: json.data.userSummary.statistics.votes,\n      tipsAndThanks: json.data.userSummary.statistics.comments,\n      questions: json.data.userSummary.statistics.questions,\n      answers: json.data.userSummary.statistics.answers,\n      helpRequests: json.data.userSummary.statistics.projectquestions,\n      helpRequestAnswers: json.data.userSummary.statistics.projectanswers,\n      replies: json.data.userSummary.statistics.replies,\n      flags: json.data.userSummary.statistics.flags,\n    } as UserStatistics\n  }\n\n  async *getUserPrograms(\n    identifier?: Kaid | string | Email,\n    sort: ListProgramSortOrder = ListProgramSortOrder.TOP,\n    limit = 40\n  ) {\n    if (!identifier && !this.authenticated)\n      throw new Error(\n        'Not authenticated: You need to login or provide an indentifier'\n      )\n\n    identifier ??= this.kaid ?? this.user?.username ?? this.user?.email\n    if (!identifier) throw new Error('Missing identifier for logged in user')\n\n    const kaid = await this.resolveCachedKaid(identifier)\n\n    const variables = {\n      kaid,\n      pageInfo: {\n        cursor: null,\n        itemsPerPage: limit,\n      },\n      sort,\n    }\n\n    const getUserProgramsPage = async (cursor?: string) => {\n      const reponse = await projectsAuthoredByUser({\n        ...variables,\n        pageInfo: {\n          ...variables.pageInfo,\n          cursor,\n        },\n      })\n      const json = await Client.#resolveJsonReponse(reponse)\n\n      assertDataResponse(json)\n      if (!json.data.user) throw new Error('User not found')\n      if (!json.data.user.programs.complete && !json.data.user.programs.cursor)\n        throw new Error('Cursor not found')\n\n      const programSchemas = json.data.user.programs.programs\n\n      const programs = programSchemas.map((programSchema) => {\n        const program = Program.fromSchema(programSchema)\n        program.client = this\n        return program\n      })\n      const nextCursor =\n        !json.data.user.programs.complete && json.data.user.programs.cursor\n\n      return { programs, cursor: nextCursor }\n    }\n\n    let { programs, cursor } = await getUserProgramsPage()\n    yield programs\n\n    while (cursor) {\n      ;({ programs, cursor } = await getUserProgramsPage(cursor))\n      yield programs\n    }\n  }\n\n  async getAllUserPrograms(\n    identifier?: Kaid | string | Email,\n    sort: ListProgramSortOrder = ListProgramSortOrder.TOP,\n    limit = 100\n  ) {\n    const programs: Program[] = []\n    for await (const page of this.getUserPrograms(identifier, sort, limit)) {\n      programs.push(...page)\n    }\n    return programs\n  }\n\n  /**\n   * @param identifier Program ID, URL or key\n   */\n  async getProgram(identifier: ProgramID | ProgramURL | ProgramKey) {\n    identifier = resolveProgramID(identifier)\n\n    const response = await programQuery(identifier)\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.programById) throw new Error('Program not found')\n\n    const program = Program.fromSchema(json.data.programById)\n    program.client = this\n\n    if (this.user && program.author?.kaid === this.kaid) {\n      program.copy({\n        author: this.user,\n      })\n      // @TODO: Add option to disable this\n      console.debug(\n        `Copied the client's user data to program ${\n          program.title\n            ? `\"${truncate(program.title, 32)}\"`\n            : program.id ?? 'unknown'\n        } because the program's author matches the client user`\n      )\n    }\n\n    return program\n  }\n\n  /**\n   * Gets a single message by its feedback key or encrypted feedback key\n   *\n   * @remarks\n   * This method is not recommended when you know the message's type. Use\n   * {@link Client!Client.getTipsAndThanks | `getTipsAndThanks`},\n   * {@link Client!Client.getQuestion | `getQuestion`} or\n   * {@link Client!Client.getReply | `getReply`} instead.\n   *\n   * @param identifier Feedback key or encrypted feedback key\n   */\n  async getMessage(\n    identifier: FeedbackKey | EncryptedFeedbackKey\n  ): Promise<TipsAndThanks | Question | Answer> {\n    if (!isFeedbackKey(identifier))\n      identifier = await this.resolveCachedFeedbackKey(identifier)\n\n    const response = await feedbackQuery({\n      topicId: PLACEHOLDER_PROGRAM_ID.toString(),\n      focusKind: FeedbackFocusKind.Scratchpad,\n      feedbackType: FeedbackType.COMMENT,\n      currentSort: FeedbackSort.TopVoted,\n      qaExpandKey: identifier,\n    })\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (\n      !json.data.feedback ||\n      !json.data.feedback.feedback ||\n      json.data.feedback.feedback.length === 0\n    )\n      throw new Error('Message not found')\n\n    const messageSchema = json.data.feedback.feedback[0]\n    let message\n\n    if (isTipsAndThanksSchema(messageSchema))\n      message = TipsAndThanks.fromSchema(messageSchema)\n    else if (isQuestionSchema(messageSchema)) {\n      const question = Question.fromSchema(messageSchema)\n      if (question.key !== identifier) {\n        const answer = question.answers?.find(\n          (answer) => answer.key === identifier\n        )\n        if (!answer) throw new Error('Question or answer not found')\n        message = answer\n        message.copy({ question })\n      } else message = question\n    } else throw new Error('Unknown message type')\n\n    message.client = this\n\n    if (this.user && message.author?.kaid === this.kaid) {\n      message.copy({\n        author: this.user,\n      })\n      console.debug(\n        `Copied the client's user data to comment ${\n          message.key ?? message.encryptedKey ?? 'unknown'\n        } because the comment's author matches the client user`\n      )\n    }\n\n    return message\n  }\n\n  /**\n   * Gets a single tips and thanks message\n   *\n   * @param identifier Feedback key or encrypted feedback key\n   */\n  async getTipsAndThanks(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    return this.getMessage(identifier) as Promise<TipsAndThanks>\n  }\n\n  /**\n   * Gets a single question message\n   *\n   * @remarks\n   * Note that Help Requests are a type of question.\n   *\n   * @param identifier Feedback key or encrypted feedback key\n   */\n  async getQuestion(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    return this.getMessage(identifier) as Promise<Question>\n  }\n\n  /**\n   * Gets a single answer message\n   *\n   * @param identifier Feedback key or encrypted feedback key\n   */\n  async getAnswer(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    return this.getMessage(identifier) as Promise<Answer>\n  }\n\n  /**\n   * Gets a single reply\n   *\n   * @param identifier Feedback key or encrypted feedback key\n   */\n  async getReply(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    const message = await this.getMessage(identifier)\n    if (!message.key) throw new Error('Message has no key')\n\n    const response = await getFeedbackReplies(message.key)\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.feedbackReplies || json.data.feedbackReplies.length === 0)\n      throw new Error('Reply not found')\n\n    const replySchema = json.data.feedbackReplies.find(\n      (reply) => reply.expandKey === identifier || reply.key === identifier\n    )\n    if (!replySchema) throw new Error('Reply not found')\n\n    const reply = Reply.fromSchema(replySchema)\n    reply.client = this\n    reply.copy({\n      message,\n    })\n\n    if (this.user && reply.author?.kaid === this.kaid) {\n      reply.copy({\n        author: this.user,\n      })\n      console.debug(\n        `Copied the client's user data to reply ${\n          reply.key ?? reply.encryptedKey ?? 'unknown'\n        } because the reply's author matches the client user`\n      )\n    }\n\n    return reply\n  }\n\n  /**\n   * Gets specified types of messages for a program\n   *\n   * @param identifier Program ID, program URL, or program key\n   *\n   * @example\n   * const client = new Client()\n   * for await (const messages of client.getProgramTipsAndThanks(5154160781082624)) {\n   *   console.log(messages.map(message => message.text)\n   * }\n   */\n  async *getProgramMessages(\n    // Default to Tips and Thanks as Khan Academy also should\n    type = Message.Type.TipsAndThanks,\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n    // @TODO Add `limit` parameter when the API supports it because currently\n    // it's only there for decoration\n  ) {\n    identifier = resolveProgramID(identifier)\n\n    const variables = {\n      topicId: identifier.toString(),\n      focusKind: FeedbackFocusKind.Scratchpad,\n      feedbackType: type as unknown as FeedbackType,\n      currentSort: sort,\n    }\n\n    // Since TypeScript doesn't like it when you try to assign `this` to a\n    // local variable, we have to use an arrow function here\n    const getProgramMessagesPage = async (cursor?: string) => {\n      const response = await feedbackQuery({\n        ...variables,\n        cursor,\n      })\n      const json = await Client.#resolveJsonReponse(response)\n\n      assertDataResponse(json)\n      if (!json.data.feedback.feedback) throw new Error('Comments not found')\n      if (!json.data.feedback.isComplete && !json.data.feedback.cursor)\n        throw new Error('Cursor not found')\n\n      // I'm sorry for this; ChatGPT wasn't at a point where it could help\n      const feedback = json.data.feedback\n        .feedback as unknown as (RecursivePartial<QuestionFeedbackSchema> &\n        RecursivePartial<BasicFeedbackSchema>)[]\n\n      const messages = feedback.map((feedback) => {\n        const message = TypeToClass[type].fromSchema(feedback)\n        message.client = this\n        return message\n      })\n      const nextCursor =\n        !json.data.feedback.isComplete && json.data.feedback.cursor\n\n      return {\n        messages,\n        cursor: nextCursor,\n      }\n    }\n\n    let { messages, cursor } = await getProgramMessagesPage()\n    yield messages\n\n    while (cursor) {\n      ;({ messages, cursor } = await getProgramMessagesPage(cursor))\n      yield messages\n    }\n  }\n\n  /**\n   * Gets all specified types of messages for a program\n   *\n   * @see {@link Client!Client.getProgramMessages}\n   *\n   * @example\n   * const client = new Client()\n   * const messages = await client.getAllProgramMessages(undefined, 5154160781082624)\n   * console.log(messages.map(message => message.text)\n   */\n  async getAllProgramMessages(\n    type = Message.Type.TipsAndThanks,\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    const messages: Message[] = []\n    for await (const page of this.getProgramMessages(type, identifier, sort)) {\n      messages.push(...page)\n    }\n    return messages\n  }\n\n  /**\n   * Gets Tips and Thanks messages for a program\n   *\n   * @see {@link Client!Client.getProgramMessages}\n   */\n  async *getProgramTipsAndThanks(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    yield* this.getProgramMessages(\n      Message.Type.TipsAndThanks,\n      identifier,\n      sort\n    ) as unknown as AsyncGenerator<TipsAndThanks[], void, unknown>\n  }\n\n  /**\n   * Gets all Tips and Thanks messages for a program\n   *\n   * @see {@link Client!Client.getAllProgramMessages}\n   */\n  async getAllProgramTipsAndThanks(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    return this.getAllProgramMessages(\n      Message.Type.TipsAndThanks,\n      identifier,\n      sort\n    ) as Promise<TipsAndThanks[]>\n  }\n\n  /**\n   * Gets questions for a program\n   *\n   * @see {@link Client!Client.getProgramMessages}\n   */\n  async *getProgramQuestions(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    yield* this.getProgramMessages(\n      Message.Type.Question,\n      identifier,\n      sort\n    ) as unknown as AsyncGenerator<Question[], void, unknown>\n  }\n\n  /**\n   * Gets all questions for a program\n   *\n   * @see {@link Client!Client.getAllProgramMessages}\n   */\n  async getAllProgramQuestions(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    return this.getAllProgramMessages(\n      Message.Type.Question,\n      identifier,\n      sort\n    ) as Promise<Question[]>\n  }\n\n  /**\n   * Gets Help Requests for a program\n   *\n   * @see {@link Client!Client.getProgramMessages}\n   */\n  async *getProgramHelpRequests(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    yield* this.getProgramMessages(\n      Message.Type.HelpRequest,\n      identifier,\n      sort\n    ) as unknown as AsyncGenerator<Question[], void, unknown>\n  }\n\n  /**\n   * Gets all Help Requests for a program\n   *\n   * @see {@link Client!Client.getAllProgramMessages}\n   */\n  async getAllProgramHelpRequests(\n    identifier: ProgramID | ProgramURL | ProgramKey,\n    sort: FeedbackSort = FeedbackSort.TopVoted\n  ) {\n    return this.getAllProgramMessages(\n      Message.Type.HelpRequest,\n      identifier,\n      sort\n    ) as Promise<Question[]>\n  }\n\n  /**\n   * Gets all replies to a message\n   *\n   * @rawEquivalent {@link queries!getFeedbackReplies}\n   */\n  async getAllMessageReplies(identifier: FeedbackKey | EncryptedFeedbackKey) {\n    identifier = await this.resolveCachedFeedbackKey(identifier)\n\n    const response = await getFeedbackReplies(identifier)\n    const json = await Client.#resolveJsonReponse(response)\n\n    assertDataResponse(json)\n    if (!json.data.feedbackReplies) throw new Error('Replies not found')\n\n    const replies = json.data.feedbackReplies.map((replySchema) => {\n      const reply = Reply.fromSchema(replySchema)\n      reply.client = this\n      return reply\n    })\n\n    return replies\n  }\n}\n"],
  "mappings": "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",
  "names": ["AvatarDataForProfile", "FeedbackQuery", "GetFeedbackReplies", "GetFullUserProfile", "GetProfileWidgets", "GetUserByUsernameOrEmail", "GetUserHoverCardProfile", "ProgramQuery", "ProjectsAuthoredByUser", "QaExpandKeyInfo", "LoginWithPasswordMutation", "ErrorCode", "ServiceErrorCode", "ServiceErrorName", "UserAccessLevel", "ProgramEditorType", "FeedbackFocusKind", "FeedbackType", "FeedbackTypename", "FeedbackSort", "ListProgramSortOrder", "ProgramType", "MessageType", "cursor", "programs", "answer", "reply", "messages", "feedback"]
}
